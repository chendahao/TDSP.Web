/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.8.1.0 (NJsonSchema v10.2.0.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export module pscApi {

export class SyncAgentClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取同步数据
     * @param category 同步类别
     * @param taskId (optional) 任务Id (可选)
     */
    getSyncData(category: string | null, taskId: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<SyncDataDto> {
        let url_ = this.baseUrl + "/api/psc/SyncAgent/{category}?";
        if (category === undefined || category === null)
            throw new Error("The parameter 'category' must be defined.");
        url_ = url_.replace("{category}", encodeURIComponent("" + category));
        if (taskId !== undefined && taskId !== null)
            url_ += "taskId=" + encodeURIComponent("" + taskId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetSyncData(_response);
        });
    }

    protected processGetSyncData(response: AxiosResponse): Promise<SyncDataDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SyncDataDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SyncDataDto>(<any>null);
    }

    /**
     * 确认同步数据获取
    获取同步数据后需要进行 确认，避免重复获取
     * @param category 数据目录
     * @param taskId 任务Id
     * @param checksum 校验值
     */
    dataSyncAck(category: string | null, taskId: string | null, checksum: string , cancelToken?: CancelToken | undefined): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/psc/SyncAgent/ack/{category}/{taskId}";
        if (category === undefined || category === null)
            throw new Error("The parameter 'category' must be defined.");
        url_ = url_.replace("{category}", encodeURIComponent("" + category));
        if (taskId === undefined || taskId === null)
            throw new Error("The parameter 'taskId' must be defined.");
        url_ = url_.replace("{taskId}", encodeURIComponent("" + taskId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(checksum);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            responseType: "blob",
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDataSyncAck(_response);
        });
    }

    protected processDataSyncAck(response: AxiosResponse): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return Promise.resolve({ fileName: fileName, status: status, data: response.data as Blob, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse | null>(<any>null);
    }

    /**
     * 提交同步数据
     */
    commitData(data: SyncDataDto , cancelToken?: CancelToken | undefined): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/psc/SyncAgent";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(data);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            responseType: "blob",
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCommitData(_response);
        });
    }

    protected processCommitData(response: AxiosResponse): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return Promise.resolve({ fileName: fileName, status: status, data: response.data as Blob, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse | null>(<any>null);
    }
}

export class AnchorageShipClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取当前期间锚地船舶
     */
    getCurrent(  cancelToken?: CancelToken | undefined): Promise<AnchorageShip[]> {
        let url_ = this.baseUrl + "/api/psc/AnchorageShip";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetCurrent(_response);
        });
    }

    protected processGetCurrent(response: AxiosResponse): Promise<AnchorageShip[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(AnchorageShip.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AnchorageShip[]>(<any>null);
    }

    /**
     * 根据期间获取锚地船舶数据
     */
    getByPeriod(date: string, timespan: number , cancelToken?: CancelToken | undefined): Promise<AnchorageShip[]> {
        let url_ = this.baseUrl + "/api/psc/AnchorageShip/{date}/{timespan}";
        if (date === undefined || date === null)
            throw new Error("The parameter 'date' must be defined.");
        url_ = url_.replace("{date}", encodeURIComponent("" + date));
        if (timespan === undefined || timespan === null)
            throw new Error("The parameter 'timespan' must be defined.");
        url_ = url_.replace("{timespan}", encodeURIComponent("" + timespan));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetByPeriod(_response);
        });
    }

    protected processGetByPeriod(response: AxiosResponse): Promise<AnchorageShip[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(AnchorageShip.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AnchorageShip[]>(<any>null);
    }

    /**
     * 上报海事局
     */
    sendUp(date: string, timespan: number , cancelToken?: CancelToken | undefined): Promise<CodeResult> {
        let url_ = this.baseUrl + "/api/psc/AnchorageShip/{date}/{timespan}/sendup";
        if (date === undefined || date === null)
            throw new Error("The parameter 'date' must be defined.");
        url_ = url_.replace("{date}", encodeURIComponent("" + date));
        if (timespan === undefined || timespan === null)
            throw new Error("The parameter 'timespan' must be defined.");
        url_ = url_.replace("{timespan}", encodeURIComponent("" + timespan));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSendUp(_response);
        });
    }

    protected processSendUp(response: AxiosResponse): Promise<CodeResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CodeResult.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CodeResult>(<any>null);
    }
}

export class BerthingPlanClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取指定日期和时段的全部靠泊计划(包括审核和未审核)
     * @param date 申报日期
     * @param timespan 申报时段
     * @param orgName (optional) 组织机构名称,如果为空则返回全部
     */
    getByPeriod(date: string, timespan: number, orgName: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<BerthingPlan[]> {
        let url_ = this.baseUrl + "/api/psc/BerthingPlan/{date}/{timespan}?";
        if (date === undefined || date === null)
            throw new Error("The parameter 'date' must be defined.");
        url_ = url_.replace("{date}", encodeURIComponent("" + date));
        if (timespan === undefined || timespan === null)
            throw new Error("The parameter 'timespan' must be defined.");
        url_ = url_.replace("{timespan}", encodeURIComponent("" + timespan));
        if (orgName !== undefined && orgName !== null)
            url_ += "orgName=" + encodeURIComponent("" + orgName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetByPeriod(_response);
        });
    }

    protected processGetByPeriod(response: AxiosResponse): Promise<BerthingPlan[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(BerthingPlan.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BerthingPlan[]>(<any>null);
    }

    /**
     * 获取期间计划审核汇总
     */
    getAuditSummary(date: string, timespan: number , cancelToken?: CancelToken | undefined): Promise<PlanAuditStatusDto[]> {
        let url_ = this.baseUrl + "/api/psc/BerthingPlan/{date}/{timespan}/AuditSummary";
        if (date === undefined || date === null)
            throw new Error("The parameter 'date' must be defined.");
        url_ = url_.replace("{date}", encodeURIComponent("" + date));
        if (timespan === undefined || timespan === null)
            throw new Error("The parameter 'timespan' must be defined.");
        url_ = url_.replace("{timespan}", encodeURIComponent("" + timespan));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetAuditSummary(_response);
        });
    }

    protected processGetAuditSummary(response: AxiosResponse): Promise<PlanAuditStatusDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PlanAuditStatusDto.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PlanAuditStatusDto[]>(<any>null);
    }

    /**
     * 获取期间计划 特定审核状态的数量
     * @param date 计划日期
     * @param timespan 计划时段
     * @param status (optional) 审核状态
     */
    getAuditCount(date: string, timespan: number, status: AuditStatus | undefined , cancelToken?: CancelToken | undefined): Promise<number> {
        let url_ = this.baseUrl + "/api/psc/BerthingPlan/{date}/{timespan}/AuditCount?";
        if (date === undefined || date === null)
            throw new Error("The parameter 'date' must be defined.");
        url_ = url_.replace("{date}", encodeURIComponent("" + date));
        if (timespan === undefined || timespan === null)
            throw new Error("The parameter 'timespan' must be defined.");
        url_ = url_.replace("{timespan}", encodeURIComponent("" + timespan));
        if (status === null)
            throw new Error("The parameter 'status' cannot be null.");
        else if (status !== undefined)
            url_ += "status=" + encodeURIComponent("" + status) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetAuditCount(_response);
        });
    }

    protected processGetAuditCount(response: AxiosResponse): Promise<number> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<number>(<any>null);
    }

    /**
     * 根据日期-时间 范围和组织机构 查询靠泊计划
     * @param start (optional) 开始时间
     * @param end (optional) 结束时间
     * @param orgName (optional) 组织机构名称,如果为空则返回全部
     * @param audit (optional) 审核状态，默认为 审核通过
     * @param showAll (optional) 显示全部,默认 false,根据审核状态获取记录
     */
    getByDateRange(start: string | undefined, end: string | undefined, orgName: string | null | undefined, audit: AuditStatus | undefined, showAll: boolean | undefined , cancelToken?: CancelToken | undefined): Promise<BerthingPlan[]> {
        let url_ = this.baseUrl + "/api/psc/BerthingPlan/range?";
        if (start === null)
            throw new Error("The parameter 'start' cannot be null.");
        else if (start !== undefined)
            url_ += "start=" + encodeURIComponent("" + start) + "&";
        if (end === null)
            throw new Error("The parameter 'end' cannot be null.");
        else if (end !== undefined)
            url_ += "end=" + encodeURIComponent("" + end) + "&";
        if (orgName !== undefined && orgName !== null)
            url_ += "orgName=" + encodeURIComponent("" + orgName) + "&";
        if (audit === null)
            throw new Error("The parameter 'audit' cannot be null.");
        else if (audit !== undefined)
            url_ += "audit=" + encodeURIComponent("" + audit) + "&";
        if (showAll === null)
            throw new Error("The parameter 'showAll' cannot be null.");
        else if (showAll !== undefined)
            url_ += "showAll=" + encodeURIComponent("" + showAll) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetByDateRange(_response);
        });
    }

    protected processGetByDateRange(response: AxiosResponse): Promise<BerthingPlan[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(BerthingPlan.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BerthingPlan[]>(<any>null);
    }

    /**
     * 根据时段范围和组织机构 查询靠泊计划
     * @param start (optional) 开始时段期间编号,形如 'BP20210101-1'
     * @param end (optional) 结束时段期间编号,形如 'BP20210101-2'
     * @param orgName (optional) 组织机构名称,如果为空则返回全部
     * @param audit (optional) 审核状态，默认为 审核通过
     * @param showAll (optional) 显示全部,默认 false,根据审核状态获取记录
     */
    getByPeriodRange(start: string | null | undefined, end: string | null | undefined, orgName: string | null | undefined, audit: AuditStatus | undefined, showAll: boolean | undefined , cancelToken?: CancelToken | undefined): Promise<BerthingPlan[]> {
        let url_ = this.baseUrl + "/api/psc/BerthingPlan/Period?";
        if (start !== undefined && start !== null)
            url_ += "start=" + encodeURIComponent("" + start) + "&";
        if (end !== undefined && end !== null)
            url_ += "end=" + encodeURIComponent("" + end) + "&";
        if (orgName !== undefined && orgName !== null)
            url_ += "orgName=" + encodeURIComponent("" + orgName) + "&";
        if (audit === null)
            throw new Error("The parameter 'audit' cannot be null.");
        else if (audit !== undefined)
            url_ += "audit=" + encodeURIComponent("" + audit) + "&";
        if (showAll === null)
            throw new Error("The parameter 'showAll' cannot be null.");
        else if (showAll !== undefined)
            url_ += "showAll=" + encodeURIComponent("" + showAll) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetByPeriodRange(_response);
        });
    }

    protected processGetByPeriodRange(response: AxiosResponse): Promise<BerthingPlan[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(BerthingPlan.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BerthingPlan[]>(<any>null);
    }

    /**
     * 根据 计划Id 获取靠泊计划对象
     */
    getById(id: string , cancelToken?: CancelToken | undefined): Promise<BerthingPlan> {
        let url_ = this.baseUrl + "/api/psc/BerthingPlan/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetById(_response);
        });
    }

    protected processGetById(response: AxiosResponse): Promise<BerthingPlan> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = BerthingPlan.fromJS(resultData200);
            return result200;
        } else if (status === 404) {
            const _responseText = response.data;
            let result404: any = null;
            let resultData404  = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BerthingPlan>(<any>null);
    }

    /**
     * 更新靠泊计划
     */
    update(planId: string, plan: BerthingPlan , cancelToken?: CancelToken | undefined): Promise<CodeResult> {
        let url_ = this.baseUrl + "/api/psc/BerthingPlan/{planId}";
        if (planId === undefined || planId === null)
            throw new Error("The parameter 'planId' must be defined.");
        url_ = url_.replace("{planId}", encodeURIComponent("" + planId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(plan);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: AxiosResponse): Promise<CodeResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204 || status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CodeResult.fromJS(resultData200);
            return result200;
        } else if (status === 404) {
            const _responseText = response.data;
            let result404: any = null;
            let resultData404  = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
        } else {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("A server side error occurred.", status, _responseText, _headers, resultdefault);
        }
    }

    /**
     * 新建靠离泊计划
     */
    create(request: BerthingPlanRequest , cancelToken?: CancelToken | undefined): Promise<CodeResult> {
        let url_ = this.baseUrl + "/api/psc/BerthingPlan";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: AxiosResponse): Promise<CodeResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
        } else if (status === 201) {
            const _responseText = response.data;
            let result201: any = null;
            let resultData201  = _responseText;
            result201 = CodeResult.fromJS(resultData201);
            return result201;
        } else {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("A server side error occurred.", status, _responseText, _headers, resultdefault);
        }
    }

    /**
     * 审核通过靠泊计划
     * @param planIds 审核通过的记录Id集合
     */
    pass(planIds: string[] , cancelToken?: CancelToken | undefined): Promise<string[]> {
        let url_ = this.baseUrl + "/api/psc/BerthingPlan/pass";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(planIds);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPass(_response);
        });
    }

    protected processPass(response: AxiosResponse): Promise<string[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            return result200;
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string[]>(<any>null);
    }

    /**
     * 提交不通过审核
     * @param planId (optional) 记录Id
     * @param reason (optional) 
     */
    noPass(planId: string | undefined, reason: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/psc/BerthingPlan/NoPass?";
        if (planId === null)
            throw new Error("The parameter 'planId' cannot be null.");
        else if (planId !== undefined)
            url_ += "planId=" + encodeURIComponent("" + planId) + "&";
        if (reason !== undefined && reason !== null)
            url_ += "reason=" + encodeURIComponent("" + reason) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processNoPass(_response);
        });
    }

    protected processNoPass(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class BerthShipClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取当前期间泊位船舶数据
     */
    getCurrent(  cancelToken?: CancelToken | undefined): Promise<BerthShipDto[]> {
        let url_ = this.baseUrl + "/api/psc/BerthShip";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetCurrent(_response);
        });
    }

    protected processGetCurrent(response: AxiosResponse): Promise<BerthShipDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(BerthShipDto.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BerthShipDto[]>(<any>null);
    }

    /**
     * 根据期间获取泊位船舶数据
     */
    getByPeriod(date: string, timespan: number , cancelToken?: CancelToken | undefined): Promise<BerthShipDto[]> {
        let url_ = this.baseUrl + "/api/psc/BerthShip/{date}/{timespan}";
        if (date === undefined || date === null)
            throw new Error("The parameter 'date' must be defined.");
        url_ = url_.replace("{date}", encodeURIComponent("" + date));
        if (timespan === undefined || timespan === null)
            throw new Error("The parameter 'timespan' must be defined.");
        url_ = url_.replace("{timespan}", encodeURIComponent("" + timespan));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetByPeriod(_response);
        });
    }

    protected processGetByPeriod(response: AxiosResponse): Promise<BerthShipDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(BerthShipDto.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BerthShipDto[]>(<any>null);
    }

    /**
     * 泊位占用比例
     * @param date (optional) 
     * @param timespan (optional) 
     */
    getOccupy(date: string | undefined, timespan: number | undefined , cancelToken?: CancelToken | undefined): Promise<OccupyPoint[]> {
        let url_ = this.baseUrl + "/api/psc/BerthShip/occupy?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (timespan === null)
            throw new Error("The parameter 'timespan' cannot be null.");
        else if (timespan !== undefined)
            url_ += "timespan=" + encodeURIComponent("" + timespan) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetOccupy(_response);
        });
    }

    protected processGetOccupy(response: AxiosResponse): Promise<OccupyPoint[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(OccupyPoint.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<OccupyPoint[]>(<any>null);
    }

    /**
     * 上报海事局
     */
    sendUp(date: string, timespan: number , cancelToken?: CancelToken | undefined): Promise<CodeResult> {
        let url_ = this.baseUrl + "/api/psc/BerthShip/{date}/{timespan}/sendup";
        if (date === undefined || date === null)
            throw new Error("The parameter 'date' must be defined.");
        url_ = url_.replace("{date}", encodeURIComponent("" + date));
        if (timespan === undefined || timespan === null)
            throw new Error("The parameter 'timespan' must be defined.");
        url_ = url_.replace("{timespan}", encodeURIComponent("" + timespan));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSendUp(_response);
        });
    }

    protected processSendUp(response: AxiosResponse): Promise<CodeResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CodeResult.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CodeResult>(<any>null);
    }
}

export class EntryAndExitClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 根据时间 查询进出港记录
     * @param start (optional) 开始时间
     * @param end (optional) 结束时间
     * @param orgName (optional) 码头名称,可以为空
     */
    getByDate(start: string | undefined, end: string | undefined, orgName: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EntryAndExitRecord[]> {
        let url_ = this.baseUrl + "/api/psc/EntryAndExit?";
        if (start === null)
            throw new Error("The parameter 'start' cannot be null.");
        else if (start !== undefined)
            url_ += "start=" + encodeURIComponent("" + start) + "&";
        if (end === null)
            throw new Error("The parameter 'end' cannot be null.");
        else if (end !== undefined)
            url_ += "end=" + encodeURIComponent("" + end) + "&";
        if (orgName !== undefined && orgName !== null)
            url_ += "orgName=" + encodeURIComponent("" + orgName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetByDate(_response);
        });
    }

    protected processGetByDate(response: AxiosResponse): Promise<EntryAndExitRecord[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(EntryAndExitRecord.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EntryAndExitRecord[]>(<any>null);
    }

    /**
     * 检查上期是否存在重复计划
    默认为当前时段
     * @param periodCode (optional) 
     */
    checkDupPlans(periodCode: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<string[]> {
        let url_ = this.baseUrl + "/api/psc/EntryAndExit/CheckDupPlans?";
        if (periodCode !== undefined && periodCode !== null)
            url_ += "periodCode=" + encodeURIComponent("" + periodCode) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCheckDupPlans(_response);
        });
    }

    protected processCheckDupPlans(response: AxiosResponse): Promise<string[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string[]>(<any>null);
    }

    /**
     * 生成 进出港记录
    默认为当前时段
     * @param periodCode (optional) 
     */
    generateEERecords(periodCode: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/psc/EntryAndExit/EERecord?";
        if (periodCode !== undefined && periodCode !== null)
            url_ += "periodCode=" + encodeURIComponent("" + periodCode) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            responseType: "blob",
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/octet-stream"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGenerateEERecords(_response);
        });
    }

    protected processGenerateEERecords(response: AxiosResponse): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return Promise.resolve({ fileName: fileName, status: status, data: response.data as Blob, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse | null>(<any>null);
    }

    /**
     * 执行 期间计划检查任务
     * @param periodCode (optional) 
     */
    queuePeriodTask(periodCode: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<string> {
        let url_ = this.baseUrl + "/api/psc/EntryAndExit/QueuePeriodTask?";
        if (periodCode !== undefined && periodCode !== null)
            url_ += "periodCode=" + encodeURIComponent("" + periodCode) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processQueuePeriodTask(_response);
        });
    }

    protected processQueuePeriodTask(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(<any>null);
    }
}

export class PlanActionClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取指定日期和期间的全部 计划活动
     * @param date (optional) 
     * @param period (optional) 
     */
    getByPeriod(date: string | undefined, period: number | undefined , cancelToken?: CancelToken | undefined): Promise<PlanAction[]> {
        let url_ = this.baseUrl + "/api/psc/PlanAction?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (period === null)
            throw new Error("The parameter 'period' cannot be null.");
        else if (period !== undefined)
            url_ += "period=" + encodeURIComponent("" + period) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetByPeriod(_response);
        });
    }

    protected processGetByPeriod(response: AxiosResponse): Promise<PlanAction[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PlanAction.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PlanAction[]>(<any>null);
    }

    /**
     * 根据Id 获取 PlanAction
     * @param planId 计划Id
     */
    getById(planId: string , cancelToken?: CancelToken | undefined): Promise<PlanActionViewModel> {
        let url_ = this.baseUrl + "/api/psc/PlanAction/{planId}";
        if (planId === undefined || planId === null)
            throw new Error("The parameter 'planId' must be defined.");
        url_ = url_.replace("{planId}", encodeURIComponent("" + planId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetById(_response);
        });
    }

    protected processGetById(response: AxiosResponse): Promise<PlanActionViewModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PlanActionViewModel.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PlanActionViewModel>(<any>null);
    }

    /**
     * 根据 船舶MMSI 获取 PlanAction
     * @param mmsi 船舶Id/MMSI
     * @param date (optional) 
     */
    getByMmsi(mmsi: string | null, date: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<PlanAction> {
        let url_ = this.baseUrl + "/api/psc/PlanAction/mmsi/{mmsi}?";
        if (mmsi === undefined || mmsi === null)
            throw new Error("The parameter 'mmsi' must be defined.");
        url_ = url_.replace("{mmsi}", encodeURIComponent("" + mmsi));
        if (date !== undefined && date !== null)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetByMmsi(_response);
        });
    }

    protected processGetByMmsi(response: AxiosResponse): Promise<PlanAction> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PlanAction.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PlanAction>(<any>null);
    }
}

export class DeclarStatusClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 根据时段查询申报状态
     */
    queryStatus(planDate: string, timeSpan: number , cancelToken?: CancelToken | undefined): Promise<DeclarStatus[]> {
        let url_ = this.baseUrl + "/api/psc/DeclarStatus/{planDate}/{timeSpan}";
        if (planDate === undefined || planDate === null)
            throw new Error("The parameter 'planDate' must be defined.");
        url_ = url_.replace("{planDate}", encodeURIComponent("" + planDate));
        if (timeSpan === undefined || timeSpan === null)
            throw new Error("The parameter 'timeSpan' must be defined.");
        url_ = url_.replace("{timeSpan}", encodeURIComponent("" + timeSpan));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processQueryStatus(_response);
        });
    }

    protected processQueryStatus(response: AxiosResponse): Promise<DeclarStatus[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DeclarStatus.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeclarStatus[]>(<any>null);
    }
}

export class PlanPeriodClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取当前计划期间
     */
    getCurrent(  cancelToken?: CancelToken | undefined): Promise<PeriodStageTime> {
        let url_ = this.baseUrl + "/api/psc/PlanPeriod";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetCurrent(_response);
        });
    }

    protected processGetCurrent(response: AxiosResponse): Promise<PeriodStageTime> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PeriodStageTime.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PeriodStageTime>(<any>null);
    }

    /**
     * 获取指定时间的 靠泊计划期间
     */
    getPeriods(date: string , cancelToken?: CancelToken | undefined): Promise<PeriodStageTime[]> {
        let url_ = this.baseUrl + "/api/psc/PlanPeriod/{date}";
        if (date === undefined || date === null)
            throw new Error("The parameter 'date' must be defined.");
        url_ = url_.replace("{date}", encodeURIComponent("" + date));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetPeriods(_response);
        });
    }

    protected processGetPeriods(response: AxiosResponse): Promise<PeriodStageTime[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PeriodStageTime.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PeriodStageTime[]>(<any>null);
    }

    /**
     * 获取的 靠泊计划期间
     */
    getPeriodByTime(date: string, timeSpan: number , cancelToken?: CancelToken | undefined): Promise<PeriodStageTime> {
        let url_ = this.baseUrl + "/api/psc/PlanPeriod/{date}/{timeSpan}";
        if (date === undefined || date === null)
            throw new Error("The parameter 'date' must be defined.");
        url_ = url_.replace("{date}", encodeURIComponent("" + date));
        if (timeSpan === undefined || timeSpan === null)
            throw new Error("The parameter 'timeSpan' must be defined.");
        url_ = url_.replace("{timeSpan}", encodeURIComponent("" + timeSpan));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetPeriodByTime(_response);
        });
    }

    protected processGetPeriodByTime(response: AxiosResponse): Promise<PeriodStageTime> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PeriodStageTime.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PeriodStageTime>(<any>null);
    }

    /**
     * 获取下一个靠泊计划期间
     */
    getNext(  cancelToken?: CancelToken | undefined): Promise<PeriodStageTime> {
        let url_ = this.baseUrl + "/api/psc/PlanPeriod/next";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetNext(_response);
        });
    }

    protected processGetNext(response: AxiosResponse): Promise<PeriodStageTime> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PeriodStageTime.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PeriodStageTime>(<any>null);
    }

    /**
     * 修改期间阶段为 Open
     */
    open(date: string, timespan: number , cancelToken?: CancelToken | undefined): Promise<CodeResult> {
        let url_ = this.baseUrl + "/api/psc/PlanPeriod/{date}/{timespan}/open";
        if (date === undefined || date === null)
            throw new Error("The parameter 'date' must be defined.");
        url_ = url_.replace("{date}", encodeURIComponent("" + date));
        if (timespan === undefined || timespan === null)
            throw new Error("The parameter 'timespan' must be defined.");
        url_ = url_.replace("{timespan}", encodeURIComponent("" + timespan));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processOpen(_response);
        });
    }

    protected processOpen(response: AxiosResponse): Promise<CodeResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CodeResult.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CodeResult>(<any>null);
    }

    /**
     * 修改期间阶段为 Checked
     */
    checked(date: string, timespan: number , cancelToken?: CancelToken | undefined): Promise<CodeResult> {
        let url_ = this.baseUrl + "/api/psc/PlanPeriod/{date}/{timespan}/checked";
        if (date === undefined || date === null)
            throw new Error("The parameter 'date' must be defined.");
        url_ = url_.replace("{date}", encodeURIComponent("" + date));
        if (timespan === undefined || timespan === null)
            throw new Error("The parameter 'timespan' must be defined.");
        url_ = url_.replace("{timespan}", encodeURIComponent("" + timespan));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processChecked(_response);
        });
    }

    protected processChecked(response: AxiosResponse): Promise<CodeResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CodeResult.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CodeResult>(<any>null);
    }

    /**
     * 靠泊计划时段列表
     */
    getTimeSpans(  cancelToken?: CancelToken | undefined): Promise<any[]> {
        let url_ = this.baseUrl + "/api/psc/PlanPeriod/timespans";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetTimeSpans(_response);
        });
    }

    protected processGetTimeSpans(response: AxiosResponse): Promise<any[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<any[]>(<any>null);
    }
}

export class EmergencyScheduleClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取指定日期和时段的 计划调度
     * @param date (optional) 计划日期
     * @param timespan (optional) 时段 1~4
     * @param showAll (optional) true 表示查看全部, false:PlanState==Pass
     */
    getByPeriod(date: string | undefined, timespan: number | undefined, showAll: boolean | undefined , cancelToken?: CancelToken | undefined): Promise<PlanSchedule[]> {
        let url_ = this.baseUrl + "/api/psc/EmergencySchedule?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (timespan === null)
            throw new Error("The parameter 'timespan' cannot be null.");
        else if (timespan !== undefined)
            url_ += "timespan=" + encodeURIComponent("" + timespan) + "&";
        if (showAll === null)
            throw new Error("The parameter 'showAll' cannot be null.");
        else if (showAll !== undefined)
            url_ += "showAll=" + encodeURIComponent("" + showAll) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetByPeriod(_response);
        });
    }

    protected processGetByPeriod(response: AxiosResponse): Promise<PlanSchedule[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PlanSchedule.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PlanSchedule[]>(<any>null);
    }

    /**
     * 创建计划
     */
    create(request: BerthingPlanRequest , cancelToken?: CancelToken | undefined): Promise<CodeResult> {
        let url_ = this.baseUrl + "/api/psc/EmergencySchedule";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: AxiosResponse): Promise<CodeResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CodeResult.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CodeResult>(<any>null);
    }

    /**
     * 更新紧急调度
     */
    update(planId: string, request: BerthingPlanRequest , cancelToken?: CancelToken | undefined): Promise<CodeResult> {
        let url_ = this.baseUrl + "/api/psc/EmergencySchedule/{planId}";
        if (planId === undefined || planId === null)
            throw new Error("The parameter 'planId' must be defined.");
        url_ = url_.replace("{planId}", encodeURIComponent("" + planId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: AxiosResponse): Promise<CodeResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CodeResult.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CodeResult>(<any>null);
    }

    /**
     * 删除紧急调度
     */
    deleteById(planId: string , cancelToken?: CancelToken | undefined): Promise<CodeResult> {
        let url_ = this.baseUrl + "/api/psc/EmergencySchedule/{planId}";
        if (planId === undefined || planId === null)
            throw new Error("The parameter 'planId' must be defined.");
        url_ = url_.replace("{planId}", encodeURIComponent("" + planId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeleteById(_response);
        });
    }

    protected processDeleteById(response: AxiosResponse): Promise<CodeResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CodeResult.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CodeResult>(<any>null);
    }

    /**
     * 上报海事局
    上报成功后,期间阶段进入到 执行阶段 Running
     */
    sendUp(  cancelToken?: CancelToken | undefined): Promise<CodeResult> {
        let url_ = this.baseUrl + "/api/psc/EmergencySchedule/sendup";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSendUp(_response);
        });
    }

    protected processSendUp(response: AxiosResponse): Promise<CodeResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CodeResult.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CodeResult>(<any>null);
    }
}

export class PlanScheduleClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取指定日期和时段的 计划调度
     * @param date (optional) 计划日期
     * @param timespan (optional) 时段 1~4
     * @param showAll (optional) true 表示查看全部, false:PlanState==Pass
     */
    getByPeriod(date: string | undefined, timespan: number | undefined, showAll: boolean | undefined , cancelToken?: CancelToken | undefined): Promise<PlanSchedule[]> {
        let url_ = this.baseUrl + "/api/psc/PlanSchedule?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (timespan === null)
            throw new Error("The parameter 'timespan' cannot be null.");
        else if (timespan !== undefined)
            url_ += "timespan=" + encodeURIComponent("" + timespan) + "&";
        if (showAll === null)
            throw new Error("The parameter 'showAll' cannot be null.");
        else if (showAll !== undefined)
            url_ += "showAll=" + encodeURIComponent("" + showAll) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetByPeriod(_response);
        });
    }

    protected processGetByPeriod(response: AxiosResponse): Promise<PlanSchedule[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PlanSchedule.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PlanSchedule[]>(<any>null);
    }

    /**
     * 根据计划Id获取 计划调度
     */
    getById(planId: string , cancelToken?: CancelToken | undefined): Promise<PlanSchedule> {
        let url_ = this.baseUrl + "/api/psc/PlanSchedule/{planId}";
        if (planId === undefined || planId === null)
            throw new Error("The parameter 'planId' must be defined.");
        url_ = url_.replace("{planId}", encodeURIComponent("" + planId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetById(_response);
        });
    }

    protected processGetById(response: AxiosResponse): Promise<PlanSchedule> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PlanSchedule.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PlanSchedule>(<any>null);
    }

    /**
     * 创建计划调度
    根据已经审核的靠泊计划生成本期间计划调度记录
     */
    create(date: string, timespan: number , cancelToken?: CancelToken | undefined): Promise<PlanSchedule[]> {
        let url_ = this.baseUrl + "/api/psc/PlanSchedule/{date}/{timespan}/create";
        if (date === undefined || date === null)
            throw new Error("The parameter 'date' must be defined.");
        url_ = url_.replace("{date}", encodeURIComponent("" + date));
        if (timespan === undefined || timespan === null)
            throw new Error("The parameter 'timespan' must be defined.");
        url_ = url_.replace("{timespan}", encodeURIComponent("" + timespan));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: AxiosResponse): Promise<PlanSchedule[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PlanSchedule.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PlanSchedule[]>(<any>null);
    }

    /**
     * 计划检查
     */
    checkPlanSchedule(date: string, timespan: number , cancelToken?: CancelToken | undefined): Promise<PlanSchedule[]> {
        let url_ = this.baseUrl + "/api/psc/PlanSchedule/{date}/{timespan}/check";
        if (date === undefined || date === null)
            throw new Error("The parameter 'date' must be defined.");
        url_ = url_.replace("{date}", encodeURIComponent("" + date));
        if (timespan === undefined || timespan === null)
            throw new Error("The parameter 'timespan' must be defined.");
        url_ = url_.replace("{timespan}", encodeURIComponent("" + timespan));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCheckPlanSchedule(_response);
        });
    }

    protected processCheckPlanSchedule(response: AxiosResponse): Promise<PlanSchedule[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PlanSchedule.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PlanSchedule[]>(<any>null);
    }

    /**
     * 靠泊计划自动排序,自动设置 调度时间
     * @param date 操作日期
     * @param interval (optional) 间隔分钟数
     * @deprecated
     */
    autoSort(date: string, timespan: number, interval: number | null | undefined , cancelToken?: CancelToken | undefined): Promise<CodeResult> {
        let url_ = this.baseUrl + "/api/psc/PlanSchedule/{date}/{timespan}/sort?";
        if (date === undefined || date === null)
            throw new Error("The parameter 'date' must be defined.");
        url_ = url_.replace("{date}", encodeURIComponent("" + date));
        if (timespan === undefined || timespan === null)
            throw new Error("The parameter 'timespan' must be defined.");
        url_ = url_.replace("{timespan}", encodeURIComponent("" + timespan));
        if (interval !== undefined && interval !== null)
            url_ += "interval=" + encodeURIComponent("" + interval) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAutoSort(_response);
        });
    }

    protected processAutoSort(response: AxiosResponse): Promise<CodeResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CodeResult.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CodeResult>(<any>null);
    }

    /**
     * 变更 调度时间
     * @param time (optional) 
     */
    adjustTime(planId: string, time: string | undefined , cancelToken?: CancelToken | undefined): Promise<CodeResult> {
        let url_ = this.baseUrl + "/api/psc/PlanSchedule/{planId}/adjust?";
        if (planId === undefined || planId === null)
            throw new Error("The parameter 'planId' must be defined.");
        url_ = url_.replace("{planId}", encodeURIComponent("" + planId));
        if (time === null)
            throw new Error("The parameter 'time' cannot be null.");
        else if (time !== undefined)
            url_ += "time=" + encodeURIComponent("" + time) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "PUT",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAdjustTime(_response);
        });
    }

    protected processAdjustTime(response: AxiosResponse): Promise<CodeResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CodeResult.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CodeResult>(<any>null);
    }

    /**
     * 导出报表 （未实现）
     */
    export(date: string, timeSpan: number , cancelToken?: CancelToken | undefined): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/psc/PlanSchedule/{date}/{timespan}/export";
        if (date === undefined || date === null)
            throw new Error("The parameter 'date' must be defined.");
        url_ = url_.replace("{date}", encodeURIComponent("" + date));
        if (timeSpan === undefined || timeSpan === null)
            throw new Error("The parameter 'timeSpan' must be defined.");
        url_ = url_.replace("{timeSpan}", encodeURIComponent("" + timeSpan));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            responseType: "blob",
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/octet-stream"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processExport(_response);
        });
    }

    protected processExport(response: AxiosResponse): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return Promise.resolve({ fileName: fileName, status: status, data: response.data as Blob, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse | null>(<any>null);
    }

    /**
     * 手动放行
     */
    pass(planId: string , cancelToken?: CancelToken | undefined): Promise<CodeResult> {
        let url_ = this.baseUrl + "/api/psc/PlanSchedule/{planId}/pass";
        if (planId === undefined || planId === null)
            throw new Error("The parameter 'planId' must be defined.");
        url_ = url_.replace("{planId}", encodeURIComponent("" + planId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPass(_response);
        });
    }

    protected processPass(response: AxiosResponse): Promise<CodeResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CodeResult.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CodeResult>(<any>null);
    }

    /**
     * 取消计划
     */
    cancel(planId: string , cancelToken?: CancelToken | undefined): Promise<CodeResult> {
        let url_ = this.baseUrl + "/api/psc/PlanSchedule/{planId}/cancel";
        if (planId === undefined || planId === null)
            throw new Error("The parameter 'planId' must be defined.");
        url_ = url_.replace("{planId}", encodeURIComponent("" + planId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCancel(_response);
        });
    }

    protected processCancel(response: AxiosResponse): Promise<CodeResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CodeResult.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CodeResult>(<any>null);
    }

    /**
     * 上报海事局
    上报成功后,期间阶段进入到 执行阶段 Running
     */
    sendUp(date: string, timespan: number , cancelToken?: CancelToken | undefined): Promise<CodeResult> {
        let url_ = this.baseUrl + "/api/psc/PlanSchedule/{date}/{timespan}/sendup";
        if (date === undefined || date === null)
            throw new Error("The parameter 'date' must be defined.");
        url_ = url_.replace("{date}", encodeURIComponent("" + date));
        if (timespan === undefined || timespan === null)
            throw new Error("The parameter 'timespan' must be defined.");
        url_ = url_.replace("{timespan}", encodeURIComponent("" + timespan));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSendUp(_response);
        });
    }

    protected processSendUp(response: AxiosResponse): Promise<CodeResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CodeResult.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CodeResult>(<any>null);
    }
}

export class PreArrivalShipClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取当前期间预到船舶
     */
    getCurrent(  cancelToken?: CancelToken | undefined): Promise<PreArrivalShip[]> {
        let url_ = this.baseUrl + "/api/psc/PreArrivalShip";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetCurrent(_response);
        });
    }

    protected processGetCurrent(response: AxiosResponse): Promise<PreArrivalShip[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PreArrivalShip.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PreArrivalShip[]>(<any>null);
    }

    /**
     * 根据期间获取预到船舶
     */
    getByPeriod(date: string, timespan: number , cancelToken?: CancelToken | undefined): Promise<PreArrivalShip[]> {
        let url_ = this.baseUrl + "/api/psc/PreArrivalShip/{date}/{timespan}";
        if (date === undefined || date === null)
            throw new Error("The parameter 'date' must be defined.");
        url_ = url_.replace("{date}", encodeURIComponent("" + date));
        if (timespan === undefined || timespan === null)
            throw new Error("The parameter 'timespan' must be defined.");
        url_ = url_.replace("{timespan}", encodeURIComponent("" + timespan));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetByPeriod(_response);
        });
    }

    protected processGetByPeriod(response: AxiosResponse): Promise<PreArrivalShip[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PreArrivalShip.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PreArrivalShip[]>(<any>null);
    }

    /**
     * 上报海事局
     */
    sendUp(date: string, timespan: number , cancelToken?: CancelToken | undefined): Promise<CodeResult> {
        let url_ = this.baseUrl + "/api/psc/PreArrivalShip/{date}/{timespan}/sendup";
        if (date === undefined || date === null)
            throw new Error("The parameter 'date' must be defined.");
        url_ = url_.replace("{date}", encodeURIComponent("" + date));
        if (timespan === undefined || timespan === null)
            throw new Error("The parameter 'timespan' must be defined.");
        url_ = url_.replace("{timespan}", encodeURIComponent("" + timespan));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSendUp(_response);
        });
    }

    protected processSendUp(response: AxiosResponse): Promise<CodeResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CodeResult.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CodeResult>(<any>null);
    }
}

export class ThroughPutClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 根据日期范围 统计日吞吐量(单位:万吨)
    根据日期分组,统计 载货量
     * @param start (optional) 开始时间
     * @param end (optional) 结束时间
     * @param orgName (optional) 组织机构名称
     */
    getThroughPutByRange(start: string | undefined, end: string | undefined, orgName: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<SeriesPoint[]> {
        let url_ = this.baseUrl + "/api/psc/ThroughPut?";
        if (start === null)
            throw new Error("The parameter 'start' cannot be null.");
        else if (start !== undefined)
            url_ += "start=" + encodeURIComponent("" + start) + "&";
        if (end === null)
            throw new Error("The parameter 'end' cannot be null.");
        else if (end !== undefined)
            url_ += "end=" + encodeURIComponent("" + end) + "&";
        if (orgName !== undefined && orgName !== null)
            url_ += "orgName=" + encodeURIComponent("" + orgName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetThroughPutByRange(_response);
        });
    }

    protected processGetThroughPutByRange(response: AxiosResponse): Promise<SeriesPoint[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SeriesPoint.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SeriesPoint[]>(<any>null);
    }

    /**
     * 根据年/月 统计吞吐量 (单位:万吨)
     * @param month 月 0/null 表示获取全年数据
     */
    getThroughPut(year: number, month: number , cancelToken?: CancelToken | undefined): Promise<SeriesPoint[]> {
        let url_ = this.baseUrl + "/api/psc/ThroughPut/{year}/{month}";
        if (year === undefined || year === null)
            throw new Error("The parameter 'year' must be defined.");
        url_ = url_.replace("{year}", encodeURIComponent("" + year));
        if (month === undefined || month === null)
            throw new Error("The parameter 'month' must be defined.");
        url_ = url_.replace("{month}", encodeURIComponent("" + month));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetThroughPut(_response);
        });
    }

    protected processGetThroughPut(response: AxiosResponse): Promise<SeriesPoint[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SeriesPoint.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SeriesPoint[]>(<any>null);
    }

    /**
     * 根据日期范围 获取货物种类分类统计(单位:万吨)
     * @param start (optional) 开始时间
     * @param end (optional) 结束时间 (可选)
     * @param orgName (optional) 组织机构名称
     */
    getGoodsByRange(start: string | undefined, end: string | undefined, orgName: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<SeriesPoint[]> {
        let url_ = this.baseUrl + "/api/psc/ThroughPut/goods?";
        if (start === null)
            throw new Error("The parameter 'start' cannot be null.");
        else if (start !== undefined)
            url_ += "start=" + encodeURIComponent("" + start) + "&";
        if (end === null)
            throw new Error("The parameter 'end' cannot be null.");
        else if (end !== undefined)
            url_ += "end=" + encodeURIComponent("" + end) + "&";
        if (orgName !== undefined && orgName !== null)
            url_ += "orgName=" + encodeURIComponent("" + orgName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetGoodsByRange(_response);
        });
    }

    protected processGetGoodsByRange(response: AxiosResponse): Promise<SeriesPoint[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SeriesPoint.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SeriesPoint[]>(<any>null);
    }

    /**
     * 根据年/月 统计货物分类统计(单位:万吨)
     * @param month 1-12,month=0 then return full year data
     */
    getGoods(year: number, month: number , cancelToken?: CancelToken | undefined): Promise<SeriesPoint[]> {
        let url_ = this.baseUrl + "/api/psc/ThroughPut/goods/{year}/{month}";
        if (year === undefined || year === null)
            throw new Error("The parameter 'year' must be defined.");
        url_ = url_.replace("{year}", encodeURIComponent("" + year));
        if (month === undefined || month === null)
            throw new Error("The parameter 'month' must be defined.");
        url_ = url_.replace("{month}", encodeURIComponent("" + month));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetGoods(_response);
        });
    }

    protected processGetGoods(response: AxiosResponse): Promise<SeriesPoint[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SeriesPoint.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SeriesPoint[]>(<any>null);
    }
}

export class ThroughPutDataClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 根据日期范围 统计日吞吐量(单位:万吨)
    根据日期分组,统计 载货量
     * @param start (optional) 开始日期
     * @param end (optional) 结束日期
     * @param orgName (optional) 组织机构名称
     */
    getThroughPutByRange(start: string | undefined, end: string | undefined, orgName: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<ThroughPutDto[]> {
        let url_ = this.baseUrl + "/api/psc/ThroughPutData?";
        if (start === null)
            throw new Error("The parameter 'start' cannot be null.");
        else if (start !== undefined)
            url_ += "start=" + encodeURIComponent("" + start) + "&";
        if (end === null)
            throw new Error("The parameter 'end' cannot be null.");
        else if (end !== undefined)
            url_ += "end=" + encodeURIComponent("" + end) + "&";
        if (orgName !== undefined && orgName !== null)
            url_ += "orgName=" + encodeURIComponent("" + orgName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetThroughPutByRange(_response);
        });
    }

    protected processGetThroughPutByRange(response: AxiosResponse): Promise<ThroughPutDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ThroughPutDto.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ThroughPutDto[]>(<any>null);
    }
}

/** 同步数据 传输对象 */
export class SyncDataDto implements ISyncDataDto {
    /** 同步任务Id,用于检测/识别通过任务 */
    taskId!: string;
    /** 同步内容类别名称 */
    category!: string;
    /** 创建时间 */
    created!: string;
    /** 消息内容,通常保存为 Json 形式 */
    payload!: string;
    /** 载荷数据校验 */
    checksum!: string;

    constructor(data?: ISyncDataDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.taskId = _data["taskId"];
            this.category = _data["category"];
            this.created = _data["created"];
            this.payload = _data["payload"];
            this.checksum = _data["checksum"];
        }
    }

    static fromJS(data: any): SyncDataDto {
        data = typeof data === 'object' ? data : {};
        let result = new SyncDataDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["taskId"] = this.taskId;
        data["category"] = this.category;
        data["created"] = this.created;
        data["payload"] = this.payload;
        data["checksum"] = this.checksum;
        return data; 
    }
}

/** 同步数据 传输对象 */
export interface ISyncDataDto {
    /** 同步任务Id,用于检测/识别通过任务 */
    taskId: string;
    /** 同步内容类别名称 */
    category: string;
    /** 创建时间 */
    created: string;
    /** 消息内容,通常保存为 Json 形式 */
    payload: string;
    /** 载荷数据校验 */
    checksum: string;
}

/** 锚地船舶 */
export class AnchorageShip implements IAnchorageShip {
    /** 主键 */
    anchShipId!: string;
    /** 期间计划 */
    plan!: PeriodPlanPart;
    /** 锚时 */
    anchorTime!: number;
    /** 船舶信息 */
    ship!: ShipInfoPart;
    /** 数据同步状态 */
    syncStatus!: SyncStatus;

    constructor(data?: IAnchorageShip) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.plan = new PeriodPlanPart();
            this.ship = new ShipInfoPart();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.anchShipId = _data["anchShipId"];
            this.plan = _data["plan"] ? PeriodPlanPart.fromJS(_data["plan"]) : new PeriodPlanPart();
            this.anchorTime = _data["anchorTime"];
            this.ship = _data["ship"] ? ShipInfoPart.fromJS(_data["ship"]) : new ShipInfoPart();
            this.syncStatus = _data["syncStatus"];
        }
    }

    static fromJS(data: any): AnchorageShip {
        data = typeof data === 'object' ? data : {};
        let result = new AnchorageShip();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["anchShipId"] = this.anchShipId;
        data["plan"] = this.plan ? this.plan.toJSON() : <any>undefined;
        data["anchorTime"] = this.anchorTime;
        data["ship"] = this.ship ? this.ship.toJSON() : <any>undefined;
        data["syncStatus"] = this.syncStatus;
        return data; 
    }
}

/** 锚地船舶 */
export interface IAnchorageShip {
    /** 主键 */
    anchShipId: string;
    /** 期间计划 */
    plan: PeriodPlanPart;
    /** 锚时 */
    anchorTime: number;
    /** 船舶信息 */
    ship: ShipInfoPart;
    /** 数据同步状态 */
    syncStatus: SyncStatus;
}

/** 计划期间 */
export abstract class PeriodPartBase implements IPeriodPartBase {
    /** 期间代码 */
    periodCode!: string;
    /** 计划日期 */
    planDate!: string;
    /** 时段 (1-4) */
    timespan!: number;

    constructor(data?: IPeriodPartBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.periodCode = _data["periodCode"];
            this.planDate = _data["planDate"];
            this.timespan = _data["timespan"];
        }
    }

    static fromJS(data: any): PeriodPartBase {
        data = typeof data === 'object' ? data : {};
        return data;
        // throw new Error("The abstract class 'PeriodPartBase' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["periodCode"] = this.periodCode;
        data["planDate"] = this.planDate;
        data["timespan"] = this.timespan;
        return data; 
    }
}

/** 计划期间 */
export interface IPeriodPartBase {
    /** 期间代码 */
    periodCode: string;
    /** 计划日期 */
    planDate: string;
    /** 时段 (1-4) */
    timespan: number;
}

/** 船舶期间计划部分,包括船舶期间和计划动作 用于 BerthPlan/AnchorageShip/PreArrivalShip */
export class PeriodPlanPart extends PeriodPartBase implements IPeriodPlanPart {
    /** 申报单位名称 */
    orgName!: string;
    /** 计划动作 */
    actionPlan!: PlanActionTypes;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IPeriodPlanPart) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.orgName = _data["orgName"];
            this.actionPlan = _data["actionPlan"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): PeriodPlanPart {
        data = typeof data === 'object' ? data : {};
        let result = new PeriodPlanPart();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orgName"] = this.orgName;
        data["actionPlan"] = this.actionPlan;
        data["remark"] = this.remark;
        super.toJSON(data);
        return data; 
    }
}

/** 船舶期间计划部分,包括船舶期间和计划动作 用于 BerthPlan/AnchorageShip/PreArrivalShip */
export interface IPeriodPlanPart extends IPeriodPartBase {
    /** 申报单位名称 */
    orgName: string;
    /** 计划动作 */
    actionPlan: PlanActionTypes;
    /** 备注 */
    remark?: string | undefined;
}

/** 靠离泊计划活动类型 None (无动作) Anchoring (锚泊) Berthing (靠泊) Unberthing (离泊) InBerthing (正在靠泊) InUnBerthing (正在离泊) ShiftUnberthing (移泊离) ShiftBerthing (移泊靠) */
export enum PlanActionTypes {
    None = "None",
    Anchoring = "Anchoring",
    Berthing = "Berthing",
    InBerthing = "InBerthing",
    ShiftUnberthing = "ShiftUnberthing",
    ShiftBerthing = "ShiftBerthing",
    InUnBerthing = "InUnBerthing",
    Unberthing = "Unberthing",
}

/** 船舶名称基础类型 */
export abstract class ShipNameBase implements IShipNameBase {
    /** MMSI */
    mmsi!: string;
    /** 中文船名 */
    name!: string;
    /** 英文船名 */
    cnName!: string;

    constructor(data?: IShipNameBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.mmsi = _data["mmsi"];
            this.name = _data["name"];
            this.cnName = _data["cnName"];
        }
    }

    static fromJS(data: any): ShipNameBase {
        data = typeof data === 'object' ? data : {};
        return data;
        // throw new Error("The abstract class 'ShipNameBase' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["mmsi"] = this.mmsi;
        data["name"] = this.name;
        data["cnName"] = this.cnName;
        return data; 
    }
}

/** 船舶名称基础类型 */
export interface IShipNameBase {
    /** MMSI */
    mmsi: string;
    /** 中文船名 */
    name: string;
    /** 英文船名 */
    cnName: string;
}

/** 船舶信息 */
export class ShipInfoPart extends ShipNameBase implements IShipInfoPart {
    /** 船长(米) */
    shipLength!: number;
    /** 船宽 */
    shipWidth!: number;
    /** 前吃水 */
    frontDraft!: number;
    /** 后吃水 */
    behindDraft!: number;
    /** 货物种类 */
    goodsType!: string;
    /** 船舶类型 */
    shipType!: string;
    /** 载重量 */
    loadWeight!: number;
    /** 载货量 */
    cargoWeight!: number;
    /** 货运代理 */
    agent?: string | undefined;
    /** 最大吃水深度 */
    maxDraft!: number;
    /** 船舶IMO编号 */
    imo?: string | undefined;
    /** 国籍 */
    nationality?: string | undefined;
    /** 船舶呼号 */
    callSign?: string | undefined;

    constructor(data?: IShipInfoPart) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.shipLength = _data["shipLength"];
            this.shipWidth = _data["shipWidth"];
            this.frontDraft = _data["frontDraft"];
            this.behindDraft = _data["behindDraft"];
            this.goodsType = _data["goodsType"];
            this.shipType = _data["shipType"];
            this.loadWeight = _data["loadWeight"];
            this.cargoWeight = _data["cargoWeight"];
            this.agent = _data["agent"];
            this.maxDraft = _data["maxDraft"];
            this.imo = _data["imo"];
            this.nationality = _data["nationality"];
            this.callSign = _data["callSign"];
        }
    }

    static fromJS(data: any): ShipInfoPart {
        data = typeof data === 'object' ? data : {};
        let result = new ShipInfoPart();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shipLength"] = this.shipLength;
        data["shipWidth"] = this.shipWidth;
        data["frontDraft"] = this.frontDraft;
        data["behindDraft"] = this.behindDraft;
        data["goodsType"] = this.goodsType;
        data["shipType"] = this.shipType;
        data["loadWeight"] = this.loadWeight;
        data["cargoWeight"] = this.cargoWeight;
        data["agent"] = this.agent;
        data["maxDraft"] = this.maxDraft;
        data["imo"] = this.imo;
        data["nationality"] = this.nationality;
        data["callSign"] = this.callSign;
        super.toJSON(data);
        return data; 
    }
}

/** 船舶信息 */
export interface IShipInfoPart extends IShipNameBase {
    /** 船长(米) */
    shipLength: number;
    /** 船宽 */
    shipWidth: number;
    /** 前吃水 */
    frontDraft: number;
    /** 后吃水 */
    behindDraft: number;
    /** 货物种类 */
    goodsType: string;
    /** 船舶类型 */
    shipType: string;
    /** 载重量 */
    loadWeight: number;
    /** 载货量 */
    cargoWeight: number;
    /** 货运代理 */
    agent?: string | undefined;
    /** 最大吃水深度 */
    maxDraft: number;
    /** 船舶IMO编号 */
    imo?: string | undefined;
    /** 国籍 */
    nationality?: string | undefined;
    /** 船舶呼号 */
    callSign?: string | undefined;
}

/** 同步状态 */
export enum SyncStatus {
    Default = "Default",
    HasChanged = "HasChanged",
    Deleted = "Deleted",
    CompleteSync = "CompleteSync",
}

/** 类型化的处理结果 */
export class CodeResult implements ICodeResult {
    /** 状态代码 */
    code!: number;
    errors?: string[] | undefined;
    msg?: string | undefined;

    constructor(data?: ICodeResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.errors = _data["errors"];
            this.msg = _data["msg"];
        }
    }

    static fromJS(data: any): CodeResult {
        data = typeof data === 'object' ? data : {};
        let result = new CodeResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["errors"] = this.errors;
        data["msg"] = this.msg;
        return data; 
    }
}

/** 类型化的处理结果 */
export interface ICodeResult {
    /** 状态代码 */
    code: number;
    errors?: string[] | undefined;
    msg?: string | undefined;
}

/** 靠离泊计划申报记录 */
export class BerthingPlanRequest implements IBerthingPlanRequest {
    /** 主键 */
    berthingPlanId!: string;
    /** 计划信息 */
    plan!: BerthingPlanPart;
    /** 船舶信息 */
    ship!: ShipInfoPart;
    /** 扩展船舶信息 */
    extended!: ExtendedShipPart;

    constructor(data?: IBerthingPlanRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.plan = new BerthingPlanPart();
            this.ship = new ShipInfoPart();
            this.extended = new ExtendedShipPart();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.berthingPlanId = _data["berthingPlanId"];
            this.plan = _data["plan"] ? BerthingPlanPart.fromJS(_data["plan"]) : new BerthingPlanPart();
            this.ship = _data["ship"] ? ShipInfoPart.fromJS(_data["ship"]) : new ShipInfoPart();
            this.extended = _data["extended"] ? ExtendedShipPart.fromJS(_data["extended"]) : new ExtendedShipPart();
        }
    }

    static fromJS(data: any): BerthingPlanRequest {
        data = typeof data === 'object' ? data : {};
        let result = new BerthingPlanRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["berthingPlanId"] = this.berthingPlanId;
        data["plan"] = this.plan ? this.plan.toJSON() : <any>undefined;
        data["ship"] = this.ship ? this.ship.toJSON() : <any>undefined;
        data["extended"] = this.extended ? this.extended.toJSON() : <any>undefined;
        return data; 
    }
}

/** 靠离泊计划申报记录 */
export interface IBerthingPlanRequest {
    /** 主键 */
    berthingPlanId: string;
    /** 计划信息 */
    plan: BerthingPlanPart;
    /** 船舶信息 */
    ship: ShipInfoPart;
    /** 扩展船舶信息 */
    extended: ExtendedShipPart;
}

/** 带有审核记录的靠离泊计划记录 */
export class BerthingPlan extends BerthingPlanRequest implements IBerthingPlan {
    /** 审核信息 */
    audit!: AuditPart;
    /** 数据状态 */
    syncStatus!: SyncStatus;

    constructor(data?: IBerthingPlan) {
        super(data);
        if (!data) {
            this.audit = new AuditPart();
        }
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.audit = _data["audit"] ? AuditPart.fromJS(_data["audit"]) : new AuditPart();
            this.syncStatus = _data["syncStatus"];
        }
    }

    static fromJS(data: any): BerthingPlan {
        data = typeof data === 'object' ? data : {};
        let result = new BerthingPlan();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["audit"] = this.audit ? this.audit.toJSON() : <any>undefined;
        data["syncStatus"] = this.syncStatus;
        super.toJSON(data);
        return data; 
    }
}

/** 带有审核记录的靠离泊计划记录 */
export interface IBerthingPlan extends IBerthingPlanRequest {
    /** 审核信息 */
    audit: AuditPart;
    /** 数据状态 */
    syncStatus: SyncStatus;
}

/** 审核信息 */
export class AuditPart implements IAuditPart {
    /** 审核状态 */
    auditStatus!: AuditStatus;
    /** 审核时间 */
    auditTime!: string;
    /** 审核人 */
    reviewedBy?: string | undefined;

    constructor(data?: IAuditPart) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.auditStatus = _data["auditStatus"];
            this.auditTime = _data["auditTime"];
            this.reviewedBy = _data["reviewedBy"];
        }
    }

    static fromJS(data: any): AuditPart {
        data = typeof data === 'object' ? data : {};
        let result = new AuditPart();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["auditStatus"] = this.auditStatus;
        data["auditTime"] = this.auditTime;
        data["reviewedBy"] = this.reviewedBy;
        return data; 
    }
}

/** 审核信息 */
export interface IAuditPart {
    /** 审核状态 */
    auditStatus: AuditStatus;
    /** 审核时间 */
    auditTime: string;
    /** 审核人 */
    reviewedBy?: string | undefined;
}

/** 审核状态            审核未通过(NoPass)            未审核(Default)            审核中(Review)            审核通过(Pass) */
export enum AuditStatus {
    Default = "Default",
    Review = "Review",
    Pass = "Pass",
    Duplicate = "Duplicate",
    NoPass = "NoPass",
}

/** 靠泊计划部分 */
export class BerthingPlanPart extends PeriodPartBase implements IBerthingPlanPart {
    /** 单位名称 */
    orgName!: string;
    /** 靠离泊时间 */
    berthingTime!: string;
    /** 港池名称 */
    harbor!: string;
    /** 靠离泊位编号 */
    berthNo!: string;
    /** 拖轮数量 */
    tugs!: number;
    /** 拖轮公司 */
    tugCorp?: string | undefined;
    /** 计划动作 */
    actionPlan!: PlanActionTypes;
    /** 是否乘潮 */
    isTide!: boolean;
    /** 是否需要引航 */
    isPilotage!: boolean;
    /** 排序 */
    sortKey?: string | undefined;

    constructor(data?: IBerthingPlanPart) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.orgName = _data["orgName"];
            this.berthingTime = _data["berthingTime"];
            this.harbor = _data["harbor"];
            this.berthNo = _data["berthNo"];
            this.tugs = _data["tugs"];
            this.tugCorp = _data["tugCorp"];
            this.actionPlan = _data["actionPlan"];
            this.isTide = _data["isTide"];
            this.isPilotage = _data["isPilotage"];
            this.sortKey = _data["sortKey"];
        }
    }

    static fromJS(data: any): BerthingPlanPart {
        data = typeof data === 'object' ? data : {};
        let result = new BerthingPlanPart();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orgName"] = this.orgName;
        data["berthingTime"] = this.berthingTime;
        data["harbor"] = this.harbor;
        data["berthNo"] = this.berthNo;
        data["tugs"] = this.tugs;
        data["tugCorp"] = this.tugCorp;
        data["actionPlan"] = this.actionPlan;
        data["isTide"] = this.isTide;
        data["isPilotage"] = this.isPilotage;
        data["sortKey"] = this.sortKey;
        super.toJSON(data);
        return data; 
    }
}

/** 靠泊计划部分 */
export interface IBerthingPlanPart extends IPeriodPartBase {
    /** 单位名称 */
    orgName: string;
    /** 靠离泊时间 */
    berthingTime: string;
    /** 港池名称 */
    harbor: string;
    /** 靠离泊位编号 */
    berthNo: string;
    /** 拖轮数量 */
    tugs: number;
    /** 拖轮公司 */
    tugCorp?: string | undefined;
    /** 计划动作 */
    actionPlan: PlanActionTypes;
    /** 是否乘潮 */
    isTide: boolean;
    /** 是否需要引航 */
    isPilotage: boolean;
    /** 排序 */
    sortKey?: string | undefined;
}

/** 计划船舶扩展信息 */
export class ExtendedShipPart implements IExtendedShipPart {
    /** 船舶属性 (内贸/外贸/外派) */
    shipAttributes?: string | undefined;
    /** 上一港 */
    previousPort?: string | undefined;
    /** 下一港 */
    nextPort?: string | undefined;
    /** 锚时(下锚时间) */
    anchorTime?: string | undefined;

    constructor(data?: IExtendedShipPart) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.shipAttributes = _data["shipAttributes"];
            this.previousPort = _data["previousPort"];
            this.nextPort = _data["nextPort"];
            this.anchorTime = _data["anchorTime"];
        }
    }

    static fromJS(data: any): ExtendedShipPart {
        data = typeof data === 'object' ? data : {};
        let result = new ExtendedShipPart();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shipAttributes"] = this.shipAttributes;
        data["previousPort"] = this.previousPort;
        data["nextPort"] = this.nextPort;
        data["anchorTime"] = this.anchorTime;
        return data; 
    }
}

/** 计划船舶扩展信息 */
export interface IExtendedShipPart {
    /** 船舶属性 (内贸/外贸/外派) */
    shipAttributes?: string | undefined;
    /** 上一港 */
    previousPort?: string | undefined;
    /** 下一港 */
    nextPort?: string | undefined;
    /** 锚时(下锚时间) */
    anchorTime?: string | undefined;
}

/** 计划审核状态 */
export class PlanAuditStatusDto implements IPlanAuditStatusDto {
    /** 组织机构名称 */
    orgName?: string | undefined;
    /** 审核状态 */
    audit!: AuditStatus;
    /** 数量 */
    count!: number;

    constructor(data?: IPlanAuditStatusDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.orgName = _data["orgName"];
            this.audit = _data["audit"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): PlanAuditStatusDto {
        data = typeof data === 'object' ? data : {};
        let result = new PlanAuditStatusDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orgName"] = this.orgName;
        data["audit"] = this.audit;
        data["count"] = this.count;
        return data; 
    }
}

/** 计划审核状态 */
export interface IPlanAuditStatusDto {
    /** 组织机构名称 */
    orgName?: string | undefined;
    /** 审核状态 */
    audit: AuditStatus;
    /** 数量 */
    count: number;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;
    extensions?: { [key: string]: any; } | undefined;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
            if (_data["extensions"]) {
                this.extensions = {} as any;
                for (let key in _data["extensions"]) {
                    if (_data["extensions"].hasOwnProperty(key))
                        this.extensions![key] = _data["extensions"][key];
                }
            }
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        if (this.extensions) {
            data["extensions"] = {};
            for (let key in this.extensions) {
                if (this.extensions.hasOwnProperty(key))
                    data["extensions"][key] = this.extensions[key];
            }
        }
        return data; 
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;
    extensions?: { [key: string]: any; } | undefined;
}

/** 泊位船舶 */
export class BerthShip implements IBerthShip {
    /** 主键 */
    shipBerthId!: string;
    /** 期间计划 */
    plan!: PeriodPlanPart;
    /** 泊位编号 */
    berthNo!: string;
    /** 靠妥时间 */
    berthTime?: string | undefined;
    /** 船舶信息 */
    ship!: ShipInfoPart;
    /** 数据同步状态 */
    syncStatus!: SyncStatus;

    constructor(data?: IBerthShip) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.plan = new PeriodPlanPart();
            this.ship = new ShipInfoPart();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.shipBerthId = _data["shipBerthId"];
            this.plan = _data["plan"] ? PeriodPlanPart.fromJS(_data["plan"]) : new PeriodPlanPart();
            this.berthNo = _data["berthNo"];
            this.berthTime = _data["berthTime"];
            this.ship = _data["ship"] ? ShipInfoPart.fromJS(_data["ship"]) : new ShipInfoPart();
            this.syncStatus = _data["syncStatus"];
        }
    }

    static fromJS(data: any): BerthShip {
        data = typeof data === 'object' ? data : {};
        let result = new BerthShip();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shipBerthId"] = this.shipBerthId;
        data["plan"] = this.plan ? this.plan.toJSON() : <any>undefined;
        data["berthNo"] = this.berthNo;
        data["berthTime"] = this.berthTime;
        data["ship"] = this.ship ? this.ship.toJSON() : <any>undefined;
        data["syncStatus"] = this.syncStatus;
        return data; 
    }
}

/** 泊位船舶 */
export interface IBerthShip {
    /** 主键 */
    shipBerthId: string;
    /** 期间计划 */
    plan: PeriodPlanPart;
    /** 泊位编号 */
    berthNo: string;
    /** 靠妥时间 */
    berthTime?: string | undefined;
    /** 船舶信息 */
    ship: ShipInfoPart;
    /** 数据同步状态 */
    syncStatus: SyncStatus;
}

export class BerthShipDto extends BerthShip implements IBerthShipDto {
    /** 港池名称 */
    harbor?: string | undefined;

    constructor(data?: IBerthShipDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.harbor = _data["harbor"];
        }
    }

    static fromJS(data: any): BerthShipDto {
        data = typeof data === 'object' ? data : {};
        let result = new BerthShipDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["harbor"] = this.harbor;
        super.toJSON(data);
        return data; 
    }
}

export interface IBerthShipDto extends IBerthShip {
    /** 港池名称 */
    harbor?: string | undefined;
}

/** 资源占用数据点 */
export class OccupyPoint implements IOccupyPoint {
    /** 资源名称 */
    name?: string | undefined;
    /** 资源总量 */
    total!: number;
    /** 占用数量 */
    used!: number;
    /** 未使用数量 */
    unused!: number;

    constructor(data?: IOccupyPoint) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.total = _data["total"];
            this.used = _data["used"];
            this.unused = _data["unused"];
        }
    }

    static fromJS(data: any): OccupyPoint {
        data = typeof data === 'object' ? data : {};
        let result = new OccupyPoint();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["total"] = this.total;
        data["used"] = this.used;
        data["unused"] = this.unused;
        return data; 
    }
}

/** 资源占用数据点 */
export interface IOccupyPoint {
    /** 资源名称 */
    name?: string | undefined;
    /** 资源总量 */
    total: number;
    /** 占用数量 */
    used: number;
    /** 未使用数量 */
    unused: number;
}

/** 进出港记录,在船舶离泊后生成 记录船舶进出港全流程记录和当前状态 */
export class EntryAndExitRecord implements IEntryAndExitRecord {
    id!: number;
    /** 单位名称 */
    orgName!: string;
    /** 港池名称 */
    harbor!: string;
    /** 靠离泊位编号 */
    berthNo!: string;
    /** 船舶基本信息 */
    ship?: ShipBaseInfoPart | undefined;
    /** 靠泊计划相关信息 */
    berth?: PlanStagePart | undefined;
    /** 离泊计划相关信息 */
    unberth?: PlanStagePart | undefined;
    /** 进港载货量 */
    import?: CargoLoadPart | undefined;
    /** 离港载货量 */
    export?: CargoLoadPart | undefined;

    constructor(data?: IEntryAndExitRecord) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.orgName = _data["orgName"];
            this.harbor = _data["harbor"];
            this.berthNo = _data["berthNo"];
            this.ship = _data["ship"] ? ShipBaseInfoPart.fromJS(_data["ship"]) : <any>undefined;
            this.berth = _data["berth"] ? PlanStagePart.fromJS(_data["berth"]) : <any>undefined;
            this.unberth = _data["unberth"] ? PlanStagePart.fromJS(_data["unberth"]) : <any>undefined;
            this.import = _data["import"] ? CargoLoadPart.fromJS(_data["import"]) : <any>undefined;
            this.export = _data["export"] ? CargoLoadPart.fromJS(_data["export"]) : <any>undefined;
        }
    }

    static fromJS(data: any): EntryAndExitRecord {
        data = typeof data === 'object' ? data : {};
        let result = new EntryAndExitRecord();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["orgName"] = this.orgName;
        data["harbor"] = this.harbor;
        data["berthNo"] = this.berthNo;
        data["ship"] = this.ship ? this.ship.toJSON() : <any>undefined;
        data["berth"] = this.berth ? this.berth.toJSON() : <any>undefined;
        data["unberth"] = this.unberth ? this.unberth.toJSON() : <any>undefined;
        data["import"] = this.import ? this.import.toJSON() : <any>undefined;
        data["export"] = this.export ? this.export.toJSON() : <any>undefined;
        return data; 
    }
}

/** 进出港记录,在船舶离泊后生成 记录船舶进出港全流程记录和当前状态 */
export interface IEntryAndExitRecord {
    id: number;
    /** 单位名称 */
    orgName: string;
    /** 港池名称 */
    harbor: string;
    /** 靠离泊位编号 */
    berthNo: string;
    /** 船舶基本信息 */
    ship?: ShipBaseInfoPart | undefined;
    /** 靠泊计划相关信息 */
    berth?: PlanStagePart | undefined;
    /** 离泊计划相关信息 */
    unberth?: PlanStagePart | undefined;
    /** 进港载货量 */
    import?: CargoLoadPart | undefined;
    /** 离港载货量 */
    export?: CargoLoadPart | undefined;
}

/** 船舶信息 */
export class ShipBaseInfoPart implements IShipBaseInfoPart {
    mmsi!: string;
    name!: string;
    cnName!: string;
    /** 船长(米) */
    shipLength!: number;
    /** 船宽 */
    shipWidth!: number;
    /** 前吃水 */
    frontDraft!: number;
    /** 后吃水 */
    behindDraft!: number;
    /** 船舶类型 */
    shipType!: string;
    /** 载重量 */
    loadWeight!: number;
    /** 最大吃水深度 */
    maxDraft!: number;
    /** 船舶IMO编号 */
    imo?: string | undefined;
    /** 国籍 */
    nationality?: string | undefined;
    /** 船舶呼号 */
    callSign?: string | undefined;

    constructor(data?: IShipBaseInfoPart) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.mmsi = _data["mmsi"];
            this.name = _data["name"];
            this.cnName = _data["cnName"];
            this.shipLength = _data["shipLength"];
            this.shipWidth = _data["shipWidth"];
            this.frontDraft = _data["frontDraft"];
            this.behindDraft = _data["behindDraft"];
            this.shipType = _data["shipType"];
            this.loadWeight = _data["loadWeight"];
            this.maxDraft = _data["maxDraft"];
            this.imo = _data["imo"];
            this.nationality = _data["nationality"];
            this.callSign = _data["callSign"];
        }
    }

    static fromJS(data: any): ShipBaseInfoPart {
        data = typeof data === 'object' ? data : {};
        let result = new ShipBaseInfoPart();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["mmsi"] = this.mmsi;
        data["name"] = this.name;
        data["cnName"] = this.cnName;
        data["shipLength"] = this.shipLength;
        data["shipWidth"] = this.shipWidth;
        data["frontDraft"] = this.frontDraft;
        data["behindDraft"] = this.behindDraft;
        data["shipType"] = this.shipType;
        data["loadWeight"] = this.loadWeight;
        data["maxDraft"] = this.maxDraft;
        data["imo"] = this.imo;
        data["nationality"] = this.nationality;
        data["callSign"] = this.callSign;
        return data; 
    }
}

/** 船舶信息 */
export interface IShipBaseInfoPart {
    mmsi: string;
    name: string;
    cnName: string;
    /** 船长(米) */
    shipLength: number;
    /** 船宽 */
    shipWidth: number;
    /** 前吃水 */
    frontDraft: number;
    /** 后吃水 */
    behindDraft: number;
    /** 船舶类型 */
    shipType: string;
    /** 载重量 */
    loadWeight: number;
    /** 最大吃水深度 */
    maxDraft: number;
    /** 船舶IMO编号 */
    imo?: string | undefined;
    /** 国籍 */
    nationality?: string | undefined;
    /** 船舶呼号 */
    callSign?: string | undefined;
}

/** 计划阶段状态 靠泊/离泊 计划 期间和Id */
export class PlanStagePart extends PeriodPartBase implements IPlanStagePart {
    /** 计划Id */
    planId!: string;
    /** 计划时间 */
    planTime!: string;

    constructor(data?: IPlanStagePart) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.planId = _data["planId"];
            this.planTime = _data["planTime"];
        }
    }

    static fromJS(data: any): PlanStagePart {
        data = typeof data === 'object' ? data : {};
        let result = new PlanStagePart();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["planId"] = this.planId;
        data["planTime"] = this.planTime;
        super.toJSON(data);
        return data; 
    }
}

/** 计划阶段状态 靠泊/离泊 计划 期间和Id */
export interface IPlanStagePart extends IPeriodPartBase {
    /** 计划Id */
    planId: string;
    /** 计划时间 */
    planTime: string;
}

/** 载货量 */
export class CargoLoadPart implements ICargoLoadPart {
    /** 货物种类 */
    goodsType!: string;
    /** 载货量 */
    weight!: number;
    /** 贸易类型 (内外贸) */
    tradeType?: string | undefined;

    constructor(data?: ICargoLoadPart) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.goodsType = _data["goodsType"];
            this.weight = _data["weight"];
            this.tradeType = _data["tradeType"];
        }
    }

    static fromJS(data: any): CargoLoadPart {
        data = typeof data === 'object' ? data : {};
        let result = new CargoLoadPart();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["goodsType"] = this.goodsType;
        data["weight"] = this.weight;
        data["tradeType"] = this.tradeType;
        return data; 
    }
}

/** 载货量 */
export interface ICargoLoadPart {
    /** 货物种类 */
    goodsType: string;
    /** 载货量 */
    weight: number;
    /** 贸易类型 (内外贸) */
    tradeType?: string | undefined;
}

/** 靠离泊计划执行情况 */
export class PlanAction implements IPlanAction {
    /** 主键 */
    planActionId!: string;
    /** 开始时间 */
    startTime?: string | undefined;
    /** 结束时间 */
    overTime?: string | undefined;
    /** 暂停时间 */
    pauseTime?: string | undefined;
    /** 原因 */
    causes?: string | undefined;
    /** 所属期间 */
    period!: PeriodPlanPart;
    /** 船舶信息 */
    ship!: ShipNamePart;
    /** 调度信息 */
    schedule!: SchedulePart;
    /** 关联的计划 */
    plan?: BerthingPlan | undefined;
    /** 数据同步状态 */
    syncStatus!: SyncStatus;

    constructor(data?: IPlanAction) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.period = new PeriodPlanPart();
            this.ship = new ShipNamePart();
            this.schedule = new SchedulePart();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.planActionId = _data["planActionId"];
            this.startTime = _data["startTime"];
            this.overTime = _data["overTime"];
            this.pauseTime = _data["pauseTime"];
            this.causes = _data["causes"];
            this.period = _data["period"] ? PeriodPlanPart.fromJS(_data["period"]) : new PeriodPlanPart();
            this.ship = _data["ship"] ? ShipNamePart.fromJS(_data["ship"]) : new ShipNamePart();
            this.schedule = _data["schedule"] ? SchedulePart.fromJS(_data["schedule"]) : new SchedulePart();
            this.plan = _data["plan"] ? BerthingPlan.fromJS(_data["plan"]) : <any>undefined;
            this.syncStatus = _data["syncStatus"];
        }
    }

    static fromJS(data: any): PlanAction {
        data = typeof data === 'object' ? data : {};
        let result = new PlanAction();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["planActionId"] = this.planActionId;
        data["startTime"] = this.startTime;
        data["overTime"] = this.overTime;
        data["pauseTime"] = this.pauseTime;
        data["causes"] = this.causes;
        data["period"] = this.period ? this.period.toJSON() : <any>undefined;
        data["ship"] = this.ship ? this.ship.toJSON() : <any>undefined;
        data["schedule"] = this.schedule ? this.schedule.toJSON() : <any>undefined;
        data["plan"] = this.plan ? this.plan.toJSON() : <any>undefined;
        data["syncStatus"] = this.syncStatus;
        return data; 
    }
}

/** 靠离泊计划执行情况 */
export interface IPlanAction {
    /** 主键 */
    planActionId: string;
    /** 开始时间 */
    startTime?: string | undefined;
    /** 结束时间 */
    overTime?: string | undefined;
    /** 暂停时间 */
    pauseTime?: string | undefined;
    /** 原因 */
    causes?: string | undefined;
    /** 所属期间 */
    period: PeriodPlanPart;
    /** 船舶信息 */
    ship: ShipNamePart;
    /** 调度信息 */
    schedule: SchedulePart;
    /** 关联的计划 */
    plan?: BerthingPlan | undefined;
    /** 数据同步状态 */
    syncStatus: SyncStatus;
}

/** 船舶名称 */
export class ShipNamePart extends ShipNameBase implements IShipNamePart {

    constructor(data?: IShipNamePart) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): ShipNamePart {
        data = typeof data === 'object' ? data : {};
        let result = new ShipNamePart();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

/** 船舶名称 */
export interface IShipNamePart extends IShipNameBase {
}

/** 调度信息 */
export class SchedulePart implements ISchedulePart {
    /** 计划时间 */
    planTime!: string;
    /** 调度时间 */
    scheduleTime!: string;
    /** 调度状态 */
    state!: ScheduleState;

    constructor(data?: ISchedulePart) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.planTime = _data["planTime"];
            this.scheduleTime = _data["scheduleTime"];
            this.state = _data["state"];
        }
    }

    static fromJS(data: any): SchedulePart {
        data = typeof data === 'object' ? data : {};
        let result = new SchedulePart();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["planTime"] = this.planTime;
        data["scheduleTime"] = this.scheduleTime;
        data["state"] = this.state;
        return data; 
    }
}

/** 调度信息 */
export interface ISchedulePart {
    /** 计划时间 */
    planTime: string;
    /** 调度时间 */
    scheduleTime: string;
    /** 调度状态 */
    state: ScheduleState;
}

/** 进出港计划调度状态 */
export enum ScheduleState {
    Default = "Default",
    Pass = "Pass",
    Cancel = "Cancel",
}

/** 靠离泊计划执行情况 */
export class PlanActionViewModel implements IPlanActionViewModel {
    /** 计划Id */
    planId!: string;
    /** 所属港池名称 */
    harbor?: string | undefined;
    /** 单位名称 */
    orgName?: string | undefined;
    /** 填报时间 */
    regDate!: string;
    /** 填报时间段 */
    timespan!: number;
    /** MMSI */
    mmsi?: string | undefined;
    /** 中文船名 */
    shipNameCn?: string | undefined;
    /** 英文船名 */
    shipNameEn?: string | undefined;
    /** 计划时间 */
    planTime?: string | undefined;
    /** 靠离泊时间 */
    berthingTime!: string;
    /** 靠离泊位 */
    berth?: string | undefined;
    /** 计划动作 */
    actionPlan!: PlanActionTypes;
    /** 开始时间 */
    startTime?: string | undefined;
    /** 结束时间 */
    overTime?: string | undefined;
    /** 暂停时间 */
    pauseTime?: string | undefined;
    /** 原因 */
    causes?: string | undefined;
    /** 过期时间 */
    lateTime?: string | undefined;
    state?: string | undefined;

    constructor(data?: IPlanActionViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.planId = _data["planId"];
            this.harbor = _data["harbor"];
            this.orgName = _data["orgName"];
            this.regDate = _data["regDate"];
            this.timespan = _data["timespan"];
            this.mmsi = _data["mmsi"];
            this.shipNameCn = _data["shipNameCn"];
            this.shipNameEn = _data["shipNameEn"];
            this.planTime = _data["planTime"];
            this.berthingTime = _data["berthingTime"];
            this.berth = _data["berth"];
            this.actionPlan = _data["actionPlan"];
            this.startTime = _data["startTime"];
            this.overTime = _data["overTime"];
            this.pauseTime = _data["pauseTime"];
            this.causes = _data["causes"];
            this.lateTime = _data["lateTime"];
            this.state = _data["state"];
        }
    }

    static fromJS(data: any): PlanActionViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new PlanActionViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["planId"] = this.planId;
        data["harbor"] = this.harbor;
        data["orgName"] = this.orgName;
        data["regDate"] = this.regDate;
        data["timespan"] = this.timespan;
        data["mmsi"] = this.mmsi;
        data["shipNameCn"] = this.shipNameCn;
        data["shipNameEn"] = this.shipNameEn;
        data["planTime"] = this.planTime;
        data["berthingTime"] = this.berthingTime;
        data["berth"] = this.berth;
        data["actionPlan"] = this.actionPlan;
        data["startTime"] = this.startTime;
        data["overTime"] = this.overTime;
        data["pauseTime"] = this.pauseTime;
        data["causes"] = this.causes;
        data["lateTime"] = this.lateTime;
        data["state"] = this.state;
        return data; 
    }
}

/** 靠离泊计划执行情况 */
export interface IPlanActionViewModel {
    /** 计划Id */
    planId: string;
    /** 所属港池名称 */
    harbor?: string | undefined;
    /** 单位名称 */
    orgName?: string | undefined;
    /** 填报时间 */
    regDate: string;
    /** 填报时间段 */
    timespan: number;
    /** MMSI */
    mmsi?: string | undefined;
    /** 中文船名 */
    shipNameCn?: string | undefined;
    /** 英文船名 */
    shipNameEn?: string | undefined;
    /** 计划时间 */
    planTime?: string | undefined;
    /** 靠离泊时间 */
    berthingTime: string;
    /** 靠离泊位 */
    berth?: string | undefined;
    /** 计划动作 */
    actionPlan: PlanActionTypes;
    /** 开始时间 */
    startTime?: string | undefined;
    /** 结束时间 */
    overTime?: string | undefined;
    /** 暂停时间 */
    pauseTime?: string | undefined;
    /** 原因 */
    causes?: string | undefined;
    /** 过期时间 */
    lateTime?: string | undefined;
    state?: string | undefined;
}

/** 申报状态 */
export class DeclarStatus implements IDeclarStatus {
    /** 组织名称 */
    orgName?: string | undefined;
    /** 计划日期 */
    planDate!: string;
    /** 时段 */
    timespan!: number;
    /** 泊位船舶数量 */
    berthShips!: number;
    /** 靠离泊计划数量 */
    berthingPlans!: number;
    /** 锚地船舶数量 */
    anchorageShips!: number;
    /** 预到船舶数量 */
    preArrivalShips!: number;

    constructor(data?: IDeclarStatus) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.orgName = _data["orgName"];
            this.planDate = _data["planDate"];
            this.timespan = _data["timespan"];
            this.berthShips = _data["berthShips"];
            this.berthingPlans = _data["berthingPlans"];
            this.anchorageShips = _data["anchorageShips"];
            this.preArrivalShips = _data["preArrivalShips"];
        }
    }

    static fromJS(data: any): DeclarStatus {
        data = typeof data === 'object' ? data : {};
        let result = new DeclarStatus();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orgName"] = this.orgName;
        data["planDate"] = this.planDate;
        data["timespan"] = this.timespan;
        data["berthShips"] = this.berthShips;
        data["berthingPlans"] = this.berthingPlans;
        data["anchorageShips"] = this.anchorageShips;
        data["preArrivalShips"] = this.preArrivalShips;
        return data; 
    }
}

/** 申报状态 */
export interface IDeclarStatus {
    /** 组织名称 */
    orgName?: string | undefined;
    /** 计划日期 */
    planDate: string;
    /** 时段 */
    timespan: number;
    /** 泊位船舶数量 */
    berthShips: number;
    /** 靠离泊计划数量 */
    berthingPlans: number;
    /** 锚地船舶数量 */
    anchorageShips: number;
    /** 预到船舶数量 */
    preArrivalShips: number;
}

/** 期间阶段 和 起止时间 */
export class PeriodStageTime implements IPeriodStageTime {
    period?: IPlanPeriod | undefined;
    stage!: PeriodStage;
    /** 开始时间 */
    startTime?: string | undefined;
    /** 结束 */
    endTime?: string | undefined;

    constructor(data?: IPeriodStageTime) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.period = _data["period"] ? IPlanPeriod.fromJS(_data["period"]) : <any>undefined;
            this.stage = _data["stage"];
            this.startTime = _data["startTime"];
            this.endTime = _data["endTime"];
        }
    }

    static fromJS(data: any): PeriodStageTime {
        data = typeof data === 'object' ? data : {};
        let result = new PeriodStageTime();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["period"] = this.period ? this.period.toJSON() : <any>undefined;
        data["stage"] = this.stage;
        data["startTime"] = this.startTime;
        data["endTime"] = this.endTime;
        return data; 
    }
}

/** 期间阶段 和 起止时间 */
export interface IPeriodStageTime {
    period?: IPlanPeriod | undefined;
    stage: PeriodStage;
    /** 开始时间 */
    startTime?: string | undefined;
    /** 结束 */
    endTime?: string | undefined;
}

/** 实现计划期间管理的数据接口 */
export abstract class IPlanPeriod implements IIPlanPeriod {
    /** 期间编号 */
    periodCode?: string | undefined;
    /** 计划日期 */
    planDate!: string;
    /** 时段 (1-4) */
    timespan!: number;

    constructor(data?: IIPlanPeriod) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.periodCode = _data["periodCode"];
            this.planDate = _data["planDate"];
            this.timespan = _data["timespan"];
        }
    }

    static fromJS(data: any): IPlanPeriod {
        data = typeof data === 'object' ? data : {};
        return data;
        // throw new Error("The abstract class 'IPlanPeriod' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["periodCode"] = this.periodCode;
        data["planDate"] = this.planDate;
        data["timespan"] = this.timespan;
        return data; 
    }
}

/** 实现计划期间管理的数据接口 */
export interface IIPlanPeriod {
    /** 期间编号 */
    periodCode?: string | undefined;
    /** 计划日期 */
    planDate: string;
    /** 时段 (1-4) */
    timespan: number;
}

/** 靠泊计划期间阶段 */
export enum PeriodStage {
    Default = "Default",
    Open = "Open",
    Checked = "Checked",
    Scheduling = "Scheduling",
    Running = "Running",
    Closed = "Closed",
}

/** 靠泊计划调度 */
export class PlanSchedule implements IPlanSchedule {
    /** 主键 */
    planId!: string;
    /** 计划期间信息 */
    period!: PeriodPlanPart;
    /** 调度信息 */
    schedule!: SchedulePart;
    /** 自动检查结果 */
    check!: CheckResultPart;
    /** 关联计划 */
    berthingPlan?: BerthingPlan | undefined;
    /** 数据同步状态 */
    syncStatus!: SyncStatus;

    constructor(data?: IPlanSchedule) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.period = new PeriodPlanPart();
            this.schedule = new SchedulePart();
            this.check = new CheckResultPart();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.planId = _data["planId"];
            this.period = _data["period"] ? PeriodPlanPart.fromJS(_data["period"]) : new PeriodPlanPart();
            this.schedule = _data["schedule"] ? SchedulePart.fromJS(_data["schedule"]) : new SchedulePart();
            this.check = _data["check"] ? CheckResultPart.fromJS(_data["check"]) : new CheckResultPart();
            this.berthingPlan = _data["berthingPlan"] ? BerthingPlan.fromJS(_data["berthingPlan"]) : <any>undefined;
            this.syncStatus = _data["syncStatus"];
        }
    }

    static fromJS(data: any): PlanSchedule {
        data = typeof data === 'object' ? data : {};
        let result = new PlanSchedule();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["planId"] = this.planId;
        data["period"] = this.period ? this.period.toJSON() : <any>undefined;
        data["schedule"] = this.schedule ? this.schedule.toJSON() : <any>undefined;
        data["check"] = this.check ? this.check.toJSON() : <any>undefined;
        data["berthingPlan"] = this.berthingPlan ? this.berthingPlan.toJSON() : <any>undefined;
        data["syncStatus"] = this.syncStatus;
        return data; 
    }
}

/** 靠泊计划调度 */
export interface IPlanSchedule {
    /** 主键 */
    planId: string;
    /** 计划期间信息 */
    period: PeriodPlanPart;
    /** 调度信息 */
    schedule: SchedulePart;
    /** 自动检查结果 */
    check: CheckResultPart;
    /** 关联计划 */
    berthingPlan?: BerthingPlan | undefined;
    /** 数据同步状态 */
    syncStatus: SyncStatus;
}

/** 检查结果部分 */
export class CheckResultPart implements ICheckResultPart {
    /** 检查结果 */
    result?: string | undefined;
    /** 检查结果详情 */
    details?: string | undefined;
    /** 检查状态 */
    state!: CheckState;

    constructor(data?: ICheckResultPart) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"];
            this.details = _data["details"];
            this.state = _data["state"];
        }
    }

    static fromJS(data: any): CheckResultPart {
        data = typeof data === 'object' ? data : {};
        let result = new CheckResultPart();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result;
        data["details"] = this.details;
        data["state"] = this.state;
        return data; 
    }
}

/** 检查结果部分 */
export interface ICheckResultPart {
    /** 检查结果 */
    result?: string | undefined;
    /** 检查结果详情 */
    details?: string | undefined;
    /** 检查状态 */
    state: CheckState;
}

/** 计划检查状态 */
export enum CheckState {
    UnChecked = "UnChecked",
    Ok = "Ok",
    Err = "Err",
}

/** 预到船舶 */
export class PreArrivalShip implements IPreArrivalShip {
    /** 主键 */
    preArrivalShipId!: string;
    /** 期间计划 */
    plan!: PeriodPlanPart;
    /** 预计到达时间 */
    arrivalTime!: string;
    /** 预靠泊位编号 */
    berthNo?: string | undefined;
    /** 船舶信息 */
    ship!: ShipInfoPart;

    constructor(data?: IPreArrivalShip) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.plan = new PeriodPlanPart();
            this.ship = new ShipInfoPart();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.preArrivalShipId = _data["preArrivalShipId"];
            this.plan = _data["plan"] ? PeriodPlanPart.fromJS(_data["plan"]) : new PeriodPlanPart();
            this.arrivalTime = _data["arrivalTime"];
            this.berthNo = _data["berthNo"];
            this.ship = _data["ship"] ? ShipInfoPart.fromJS(_data["ship"]) : new ShipInfoPart();
        }
    }

    static fromJS(data: any): PreArrivalShip {
        data = typeof data === 'object' ? data : {};
        let result = new PreArrivalShip();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["preArrivalShipId"] = this.preArrivalShipId;
        data["plan"] = this.plan ? this.plan.toJSON() : <any>undefined;
        data["arrivalTime"] = this.arrivalTime;
        data["berthNo"] = this.berthNo;
        data["ship"] = this.ship ? this.ship.toJSON() : <any>undefined;
        return data; 
    }
}

/** 预到船舶 */
export interface IPreArrivalShip {
    /** 主键 */
    preArrivalShipId: string;
    /** 期间计划 */
    plan: PeriodPlanPart;
    /** 预计到达时间 */
    arrivalTime: string;
    /** 预靠泊位编号 */
    berthNo?: string | undefined;
    /** 船舶信息 */
    ship: ShipInfoPart;
}

/** 数据系列点 */
export class SeriesPoint implements ISeriesPoint {
    /** 数据点名称 */
    name?: string | undefined;
    /** 统计值 */
    value!: number;
    /** 分组计数 */
    count!: number;

    constructor(data?: ISeriesPoint) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.value = _data["value"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): SeriesPoint {
        data = typeof data === 'object' ? data : {};
        let result = new SeriesPoint();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["value"] = this.value;
        data["count"] = this.count;
        return data; 
    }
}

/** 数据系列点 */
export interface ISeriesPoint {
    /** 数据点名称 */
    name?: string | undefined;
    /** 统计值 */
    value: number;
    /** 分组计数 */
    count: number;
}

/** 吞吐量统计数据 */
export class ThroughPutDto implements IThroughPutDto {
    /** 码头机构名称 */
    orgName?: string | undefined;
    /** 贸易类型 (内外贸) */
    tradeType?: string | undefined;
    /** 货物种类 */
    goodsType!: string;
    /** 载货量 (万吨) */
    weight!: number;
    /** 船只数量 */
    count!: number;

    constructor(data?: IThroughPutDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.orgName = _data["orgName"];
            this.tradeType = _data["tradeType"];
            this.goodsType = _data["goodsType"];
            this.weight = _data["weight"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): ThroughPutDto {
        data = typeof data === 'object' ? data : {};
        let result = new ThroughPutDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orgName"] = this.orgName;
        data["tradeType"] = this.tradeType;
        data["goodsType"] = this.goodsType;
        data["weight"] = this.weight;
        data["count"] = this.count;
        return data; 
    }
}

/** 吞吐量统计数据 */
export interface IThroughPutDto {
    /** 码头机构名称 */
    orgName?: string | undefined;
    /** 贸易类型 (内外贸) */
    tradeType?: string | undefined;
    /** 货物种类 */
    goodsType: string;
    /** 载货量 (万吨) */
    weight: number;
    /** 船只数量 */
    count: number;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}

}