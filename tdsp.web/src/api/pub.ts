/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.6.0.0 (NJsonSchema v10.1.18.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export module pubApi {

export class BerthInfoClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 根据当前用户组织名称获取 机构所属泊位编号
     * @param pageSize (optional) 页面大小
     * @param page (optional) 当前页码
     * @param sortBy (optional) 排序字段
     * @param searchKey (optional) 搜索值
     * @param descending (optional) 逆序
     */
    getAll(pageSize: number | null | undefined, page: number | null | undefined, sortBy: string | null | undefined, searchKey: string | null | undefined, descending: boolean | undefined , cancelToken?: CancelToken | undefined): Promise<PageResultOfBerthInfo> {
        let url_ = this.baseUrl + "/api/pub/BerthInfo?";
        if (pageSize !== undefined && pageSize !== null)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (page !== undefined && page !== null)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (sortBy !== undefined && sortBy !== null)
            url_ += "SortBy=" + encodeURIComponent("" + sortBy) + "&";
        if (searchKey !== undefined && searchKey !== null)
            url_ += "SearchKey=" + encodeURIComponent("" + searchKey) + "&";
        if (descending === null)
            throw new Error("The parameter 'descending' cannot be null.");
        else if (descending !== undefined)
            url_ += "Descending=" + encodeURIComponent("" + descending) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetAll(_response);
        });
    }

    protected processGetAll(response: AxiosResponse): Promise<PageResultOfBerthInfo> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PageResultOfBerthInfo.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PageResultOfBerthInfo>(<any>null);
    }

    /**
     * 根据组织名称获取 机构所属泊位编号
     */
    getByOrgName(orgName: string | null , cancelToken?: CancelToken | undefined): Promise<BerthInfo[]> {
        let url_ = this.baseUrl + "/api/pub/BerthInfo/org/{orgName}";
        if (orgName === undefined || orgName === null)
            throw new Error("The parameter 'orgName' must be defined.");
        url_ = url_.replace("{orgName}", encodeURIComponent("" + orgName));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetByOrgName(_response);
        });
    }

    protected processGetByOrgName(response: AxiosResponse): Promise<BerthInfo[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(BerthInfo.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BerthInfo[]>(<any>null);
    }

    /**
     * 根据港池名称,获取该港池下所有泊位信息
     */
    getByHarbor(harbor: string | null , cancelToken?: CancelToken | undefined): Promise<BerthInfo[]> {
        let url_ = this.baseUrl + "/api/pub/BerthInfo/harbor/{harbor}";
        if (harbor === undefined || harbor === null)
            throw new Error("The parameter 'harbor' must be defined.");
        url_ = url_.replace("{harbor}", encodeURIComponent("" + harbor));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetByHarbor(_response);
        });
    }

    protected processGetByHarbor(response: AxiosResponse): Promise<BerthInfo[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(BerthInfo.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BerthInfo[]>(<any>null);
    }

    /**
     * 根据码头名称,获取该码头下所有泊位信息
     */
    getByWharf(wharf: string | null , cancelToken?: CancelToken | undefined): Promise<BerthInfo[]> {
        let url_ = this.baseUrl + "/api/pub/BerthInfo/wharf/{wharf}";
        if (wharf === undefined || wharf === null)
            throw new Error("The parameter 'wharf' must be defined.");
        url_ = url_.replace("{wharf}", encodeURIComponent("" + wharf));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetByWharf(_response);
        });
    }

    protected processGetByWharf(response: AxiosResponse): Promise<BerthInfo[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(BerthInfo.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BerthInfo[]>(<any>null);
    }
}

export class CodesClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 组织机构代码
     */
    getOrgans(  cancelToken?: CancelToken | undefined): Promise<Code[]> {
        let url_ = this.baseUrl + "/api/pub/Codes/Organ";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetOrgans(_response);
        });
    }

    protected processGetOrgans(response: AxiosResponse): Promise<Code[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Code.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Code[]>(<any>null);
    }

    /**
     * 港池编码
     */
    getHarbors(  cancelToken?: CancelToken | undefined): Promise<Code[]> {
        let url_ = this.baseUrl + "/api/pub/Codes/Harbor";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetHarbors(_response);
        });
    }

    protected processGetHarbors(response: AxiosResponse): Promise<Code[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Code.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Code[]>(<any>null);
    }

    /**
     * 码头编码
     */
    getWharfs(  cancelToken?: CancelToken | undefined): Promise<Code[]> {
        let url_ = this.baseUrl + "/api/pub/Codes/Wharf";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetWharfs(_response);
        });
    }

    protected processGetWharfs(response: AxiosResponse): Promise<Code[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Code.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Code[]>(<any>null);
    }
}

export class NewsClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取新闻公告信息的分页数据
     * @param pageSize (optional) 页面大小
     * @param page (optional) 当前页码
     * @param sortBy (optional) 排序字段
     * @param searchKey (optional) 搜索值
     * @param descending (optional) 逆序
     */
    getPage(pageSize: number | null | undefined, page: number | null | undefined, sortBy: string | null | undefined, searchKey: string | null | undefined, descending: boolean | undefined , cancelToken?: CancelToken | undefined): Promise<PageResultOfNewsInfo> {
        let url_ = this.baseUrl + "/api/pub/News?";
        if (pageSize !== undefined && pageSize !== null)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (page !== undefined && page !== null)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (sortBy !== undefined && sortBy !== null)
            url_ += "SortBy=" + encodeURIComponent("" + sortBy) + "&";
        if (searchKey !== undefined && searchKey !== null)
            url_ += "SearchKey=" + encodeURIComponent("" + searchKey) + "&";
        if (descending === null)
            throw new Error("The parameter 'descending' cannot be null.");
        else if (descending !== undefined)
            url_ += "Descending=" + encodeURIComponent("" + descending) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetPage(_response);
        });
    }

    protected processGetPage(response: AxiosResponse): Promise<PageResultOfNewsInfo> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PageResultOfNewsInfo.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PageResultOfNewsInfo>(<any>null);
    }

    /**
     * 创建新闻公告,需要 [Publish] 角色
     */
    create(news: News , cancelToken?: CancelToken | undefined): Promise<NewsInfo | null> {
        let url_ = this.baseUrl + "/api/pub/News";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(news);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: AxiosResponse): Promise<NewsInfo | null> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 201) {
            const _responseText = response.data;
            let result200: any = {code:0};
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(BerthInfo.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<NewsInfo | null>(<any>null);
    }

    /**
     * 获取最新新闻摘要
     * @param top (optional) 
     */
    getTop(top: number | undefined , cancelToken?: CancelToken | undefined): Promise<NewsInfo[]> {
        let url_ = this.baseUrl + "/api/pub/News/top?";
        if (top === null)
            throw new Error("The parameter 'top' cannot be null.");
        else if (top !== undefined)
            url_ += "top=" + encodeURIComponent("" + top) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetTop(_response);
        });
    }

    protected processGetTop(response: AxiosResponse): Promise<NewsInfo[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(NewsInfo.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<NewsInfo[]>(<any>null);
    }

    /**
     * 根据Id获取新闻内容
     */
    getById(id: number , cancelToken?: CancelToken | undefined): Promise<News> {
        let url_ = this.baseUrl + "/api/pub/News/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetById(_response);
        });
    }

    protected processGetById(response: AxiosResponse): Promise<News> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = News.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<News>(<any>null);
    }

    /**
     * 更新新闻内容,需要 [Publish] 角色
     */
    update(id: number, news: News , cancelToken?: CancelToken | undefined): Promise<NewsInfo | null> {
        let url_ = this.baseUrl + "/api/pub/News/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(news);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: AxiosResponse): Promise<NewsInfo | null> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 202) {
            const _responseText = response.data;
            let result200: any = {code:0};
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(BerthInfo.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<NewsInfo | null>(<any>null);
    }

    /**
     * 删除新闻公告,需要 [Publish] 角色
     */
    remove(id: number , cancelToken?: CancelToken | undefined): Promise<NewsInfo | null> {
        let url_ = this.baseUrl + "/api/pub/News/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "application/octet-stream"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRemove(_response);
        });
    }

    protected processRemove(response: AxiosResponse): Promise<NewsInfo | null> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = {code:0};
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(BerthInfo.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<NewsInfo | null>(<any>null);
    }
}

export class ShipInfoClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取船舶信息的分页数据
     * @param pageSize (optional) 页面大小
     * @param page (optional) 当前页码
     * @param sortBy (optional) 排序字段
     * @param searchKey (optional) 搜索值
     * @param descending (optional) 逆序
     */
    getPage(pageSize: number | null | undefined, page: number | null | undefined, sortBy: string | null | undefined, searchKey: string | null | undefined, descending: boolean | undefined , cancelToken?: CancelToken | undefined): Promise<PageResultOfShipInfo> {
        let url_ = this.baseUrl + "/api/pub/ShipInfo?";
        if (pageSize !== undefined && pageSize !== null)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (page !== undefined && page !== null)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (sortBy !== undefined && sortBy !== null)
            url_ += "SortBy=" + encodeURIComponent("" + sortBy) + "&";
        if (searchKey !== undefined && searchKey !== null)
            url_ += "SearchKey=" + encodeURIComponent("" + searchKey) + "&";
        if (descending === null)
            throw new Error("The parameter 'descending' cannot be null.");
        else if (descending !== undefined)
            url_ += "Descending=" + encodeURIComponent("" + descending) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetPage(_response);
        });
    }

    protected processGetPage(response: AxiosResponse): Promise<PageResultOfShipInfo> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PageResultOfShipInfo.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PageResultOfShipInfo>(<any>null);
    }

    /**
     * 查询船名,返回前20条数据
     * @param name (optional) 船舶MMSI/名称
     * @param count (optional) 
     */
    searchByName(name: string | null | undefined, count: number | undefined , cancelToken?: CancelToken | undefined): Promise<IShipName[]> {
        let url_ = this.baseUrl + "/api/pub/ShipInfo/search?";
        if (name !== undefined && name !== null)
            url_ += "name=" + encodeURIComponent("" + name) + "&";
        if (count === null)
            throw new Error("The parameter 'count' cannot be null.");
        else if (count !== undefined)
            url_ += "count=" + encodeURIComponent("" + count) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSearchByName(_response);
        });
    }

    protected processSearchByName(response: AxiosResponse): Promise<IShipName[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(IShipName.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<IShipName[]>(<any>null);
    }

    /**
     * 根据MMSI 获取船舶信息
     */
    getByMMSI(mmsi: string | null , cancelToken?: CancelToken | undefined): Promise<ShipInfo> {
        let url_ = this.baseUrl + "/api/pub/ShipInfo/{mmsi}";
        if (mmsi === undefined || mmsi === null)
            throw new Error("The parameter 'mmsi' must be defined.");
        url_ = url_.replace("{mmsi}", encodeURIComponent("" + mmsi));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetByMMSI(_response);
        });
    }

    protected processGetByMMSI(response: AxiosResponse): Promise<ShipInfo> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ShipInfo.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ShipInfo>(<any>null);
    }
}

export class TidesClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取 潮汐表分页数据
     * @param pageSize (optional) 页面大小
     * @param page (optional) 当前页码
     * @param sortBy (optional) 排序字段
     * @param searchKey (optional) 搜索值
     * @param descending (optional) 逆序
     */
    getAll(pageSize: number | null | undefined, page: number | null | undefined, sortBy: string | null | undefined, searchKey: string | null | undefined, descending: boolean | undefined , cancelToken?: CancelToken | undefined): Promise<PageResultOfDayTide> {
        let url_ = this.baseUrl + "/api/pub/Tides?";
        if (pageSize !== undefined && pageSize !== null)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (page !== undefined && page !== null)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (sortBy !== undefined && sortBy !== null)
            url_ += "SortBy=" + encodeURIComponent("" + sortBy) + "&";
        if (searchKey !== undefined && searchKey !== null)
            url_ += "SearchKey=" + encodeURIComponent("" + searchKey) + "&";
        if (descending === null)
            throw new Error("The parameter 'descending' cannot be null.");
        else if (descending !== undefined)
            url_ += "Descending=" + encodeURIComponent("" + descending) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetAll(_response);
        });
    }

    protected processGetAll(response: AxiosResponse): Promise<PageResultOfDayTide> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PageResultOfDayTide.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PageResultOfDayTide>(<any>null);
    }

    /**
     * 获取给定日期的潮汐表
     * @param date 查询日期,默认为当天
     */
    getDayTides(date: string , cancelToken?: CancelToken | undefined): Promise<DayTide> {
        let url_ = this.baseUrl + "/api/pub/Tides/{date}";
        if (date === undefined || date === null)
            throw new Error("The parameter 'date' must be defined.");
        url_ = url_.replace("{date}", encodeURIComponent("" + date));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetDayTides(_response);
        });
    }

    protected processGetDayTides(response: AxiosResponse): Promise<DayTide> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DayTide.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DayTide>(<any>null);
    }

    /**
     * 获取当日潮高序列(30分钟一个数值)
     */
    getTodaySeries(  cancelToken?: CancelToken | undefined): Promise<TidePoint[]> {
        let url_ = this.baseUrl + "/api/pub/Tides/series";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetTodaySeries(_response);
        });
    }

    protected processGetTodaySeries(response: AxiosResponse): Promise<TidePoint[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TidePoint.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TidePoint[]>(<any>null);
    }

    /**
     * 返回指定日期标准潮高序列
     */
    getSeries(date: string , cancelToken?: CancelToken | undefined): Promise<TidePoint[]> {
        let url_ = this.baseUrl + "/api/pub/Tides/series/{date}";
        if (date === undefined || date === null)
            throw new Error("The parameter 'date' must be defined.");
        url_ = url_.replace("{date}", encodeURIComponent("" + date));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetSeries(_response);
        });
    }

    protected processGetSeries(response: AxiosResponse): Promise<TidePoint[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TidePoint.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TidePoint[]>(<any>null);
    }

    /**
     * 爬取并同步数据
     */
    syncData(date: string , cancelToken?: CancelToken | undefined): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/pub/Tides/sync/{date}";
        if (date === undefined || date === null)
            throw new Error("The parameter 'date' must be defined.");
        url_ = url_.replace("{date}", encodeURIComponent("" + date));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            responseType: "blob",
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/octet-stream"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSyncData(_response);
        });
    }

    protected processSyncData(response: AxiosResponse): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return Promise.resolve({ fileName: fileName, status: status, data: response.data as Blob, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse | null>(<any>null);
    }

    /**
     * 获取当前 潮汐数据点
     */
    getTidePointNow(  cancelToken?: CancelToken | undefined): Promise<TidePoint> {
        let url_ = this.baseUrl + "/api/pub/Tides/Point";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetTidePointNow(_response);
        });
    }

    protected processGetTidePointNow(response: AxiosResponse): Promise<TidePoint> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = TidePoint.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TidePoint>(<any>null);
    }

    /**
     * 获取给定时间 潮汐数据点
     */
    getTidePoint(time: string , cancelToken?: CancelToken | undefined): Promise<TidePoint> {
        let url_ = this.baseUrl + "/api/pub/Tides/Point/{time}";
        if (time === undefined || time === null)
            throw new Error("The parameter 'time' must be defined.");
        url_ = url_.replace("{time}", encodeURIComponent("" + time));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetTidePoint(_response);
        });
    }

    protected processGetTidePoint(response: AxiosResponse): Promise<TidePoint> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = TidePoint.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TidePoint>(<any>null);
    }
}

export class WeatherClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 根据日期获取天气数据,默认获取当天数据
     * @param date (optional) 
     * @param pageSize (optional) 页面大小
     * @param page (optional) 当前页码
     * @param sortBy (optional) 排序字段
     * @param searchKey (optional) 搜索值
     * @param descending (optional) 逆序
     */
    getByDate(date: string | null | undefined, pageSize: number | null | undefined, page: number | null | undefined, sortBy: string | null | undefined, searchKey: string | null | undefined, descending: boolean | undefined , cancelToken?: CancelToken | undefined): Promise<PageResultOfWeather> {
        let url_ = this.baseUrl + "/api/pub/Weather?";
        if (date !== undefined && date !== null)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (pageSize !== undefined && pageSize !== null)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (page !== undefined && page !== null)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (sortBy !== undefined && sortBy !== null)
            url_ += "SortBy=" + encodeURIComponent("" + sortBy) + "&";
        if (searchKey !== undefined && searchKey !== null)
            url_ += "SearchKey=" + encodeURIComponent("" + searchKey) + "&";
        if (descending === null)
            throw new Error("The parameter 'descending' cannot be null.");
        else if (descending !== undefined)
            url_ += "Descending=" + encodeURIComponent("" + descending) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetByDate(_response);
        });
    }

    protected processGetByDate(response: AxiosResponse): Promise<PageResultOfWeather> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PageResultOfWeather.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PageResultOfWeather>(<any>null);
    }

    /**
     * 获取当天天气
     */
    getToday(  cancelToken?: CancelToken | undefined): Promise<Weather[]> {
        let url_ = this.baseUrl + "/api/pub/Weather/today";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetToday(_response);
        });
    }

    protected processGetToday(response: AxiosResponse): Promise<Weather[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Weather.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Weather[]>(<any>null);
    }

    /**
     * 爬取并同步数据
     */
    syncData(date: string , cancelToken?: CancelToken | undefined): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/pub/Weather/sync/{date}";
        if (date === undefined || date === null)
            throw new Error("The parameter 'date' must be defined.");
        url_ = url_.replace("{date}", encodeURIComponent("" + date));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            responseType: "blob",
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/octet-stream"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSyncData(_response);
        });
    }

    protected processSyncData(response: AxiosResponse): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return Promise.resolve({ fileName: fileName, status: status, data: response.data as Blob, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse | null>(<any>null);
    }
}

/** 数据分页结果 */
export class PageResultOfBerthInfo implements IPageResultOfBerthInfo {
    /** 分页信息 */
    page?: Paging | undefined;
    /** 分页数据 */
    values?: BerthInfo[] | undefined;

    constructor(data?: IPageResultOfBerthInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.page = _data["page"] ? Paging.fromJS(_data["page"]) : <any>undefined;
            if (Array.isArray(_data["values"])) {
                this.values = [] as any;
                for (let item of _data["values"])
                    this.values!.push(BerthInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PageResultOfBerthInfo {
        data = typeof data === 'object' ? data : {};
        let result = new PageResultOfBerthInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["page"] = this.page ? this.page.toJSON() : <any>undefined;
        if (Array.isArray(this.values)) {
            data["values"] = [];
            for (let item of this.values)
                data["values"].push(item.toJSON());
        }
        return data; 
    }
}

/** 数据分页结果 */
export interface IPageResultOfBerthInfo {
    /** 分页信息 */
    page?: Paging | undefined;
    /** 分页数据 */
    values?: BerthInfo[] | undefined;
}

/** 分页数据 */
export class Paging implements IPaging {
    /** 总数量 */
    total!: number;
    /** 总页数 */
    pages!: number;
    /** 页面大小 */
    pageSize!: number;
    /** 当前页码 */
    page!: number;

    constructor(data?: IPaging) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.page = 20;
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total = _data["total"];
            this.pages = _data["pages"];
            this.pageSize = _data["pageSize"];
            this.page = _data["page"] !== undefined ? _data["page"] : 20;
        }
    }

    static fromJS(data: any): Paging {
        data = typeof data === 'object' ? data : {};
        let result = new Paging();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total"] = this.total;
        data["pages"] = this.pages;
        data["pageSize"] = this.pageSize;
        data["page"] = this.page;
        return data; 
    }
}

/** 分页数据 */
export interface IPaging {
    /** 总数量 */
    total: number;
    /** 总页数 */
    pages: number;
    /** 页面大小 */
    pageSize: number;
    /** 当前页码 */
    page: number;
}

/** 泊位信息 */
export class BerthInfo implements IBerthInfo {
    /** 泊位编号 */
    berthNo?: string | undefined;
    /** 码头名称 */
    wharf?: string | undefined;
    /** 港池名称 */
    harbor?: string | undefined;
    /** 码头所属组织名称 */
    orgName?: string | undefined;

    constructor(data?: IBerthInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.berthNo = _data["berthNo"];
            this.wharf = _data["wharf"];
            this.harbor = _data["harbor"];
            this.orgName = _data["orgName"];
        }
    }

    static fromJS(data: any): BerthInfo {
        data = typeof data === 'object' ? data : {};
        let result = new BerthInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["berthNo"] = this.berthNo;
        data["wharf"] = this.wharf;
        data["harbor"] = this.harbor;
        data["orgName"] = this.orgName;
        return data; 
    }
}

/** 泊位信息 */
export interface IBerthInfo {
    /** 泊位编号 */
    berthNo?: string | undefined;
    /** 码头名称 */
    wharf?: string | undefined;
    /** 港池名称 */
    harbor?: string | undefined;
    /** 码头所属组织名称 */
    orgName?: string | undefined;
}

/** 代码结果集 */
export class Code implements ICode {
    /** 键值 */
    value?: string | undefined;
    /** 名称/标题 */
    text?: string | undefined;

    constructor(data?: ICode) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
            this.text = _data["text"];
        }
    }

    static fromJS(data: any): Code {
        data = typeof data === 'object' ? data : {};
        let result = new Code();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["text"] = this.text;
        return data; 
    }
}

/** 代码结果集 */
export interface ICode {
    /** 键值 */
    value?: string | undefined;
    /** 名称/标题 */
    text?: string | undefined;
}

/** 数据分页结果 */
export class PageResultOfNewsInfo implements IPageResultOfNewsInfo {
    /** 分页信息 */
    page?: Paging | undefined;
    /** 分页数据 */
    values?: NewsInfo[] | undefined;

    constructor(data?: IPageResultOfNewsInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.page = _data["page"] ? Paging.fromJS(_data["page"]) : <any>undefined;
            if (Array.isArray(_data["values"])) {
                this.values = [] as any;
                for (let item of _data["values"])
                    this.values!.push(NewsInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PageResultOfNewsInfo {
        data = typeof data === 'object' ? data : {};
        let result = new PageResultOfNewsInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["page"] = this.page ? this.page.toJSON() : <any>undefined;
        if (Array.isArray(this.values)) {
            data["values"] = [];
            for (let item of this.values)
                data["values"].push(item.toJSON());
        }
        return data; 
    }
}

/** 数据分页结果 */
export interface IPageResultOfNewsInfo {
    /** 分页信息 */
    page?: Paging | undefined;
    /** 分页数据 */
    values?: NewsInfo[] | undefined;
}

/** 新闻摘要信息 */
export class NewsInfo implements INewsInfo {
    /** 主键 */
    id!: number;
    /** 新闻标题 */
    title!: string;
    /** 所属分类 */
    typeName!: string;
    /** 发布时间 */
    published!: string;
    /** 图文内容 */
    source!: string;
    /** 图文内容 */
    summary!: string;

    constructor(data?: INewsInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.typeName = _data["typeName"];
            this.published = _data["published"];
            this.source = _data["source"];
            this.summary = _data["summary"];
        }
    }

    static fromJS(data: any): NewsInfo {
        data = typeof data === 'object' ? data : {};
        let result = new NewsInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["typeName"] = this.typeName;
        data["published"] = this.published;
        data["source"] = this.source;
        data["summary"] = this.summary;
        return data; 
    }
}

/** 新闻摘要信息 */
export interface INewsInfo {
    /** 主键 */
    id: number;
    /** 新闻标题 */
    title: string;
    /** 所属分类 */
    typeName: string;
    /** 发布时间 */
    published: string;
    /** 图文内容 */
    source: string;
    /** 图文内容 */
    summary: string;
}

/** 新闻公告 */
export class News extends NewsInfo implements INews {
    /** 正文内容 */
    content?: string | undefined;

    constructor(data?: INews) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.content = _data["content"];
        }
    }

    static fromJS(data: any): News {
        data = typeof data === 'object' ? data : {};
        let result = new News();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["content"] = this.content;
        super.toJSON(data);
        return data; 
    }
}

/** 新闻公告 */
export interface INews extends INewsInfo {
    /** 正文内容 */
    content?: string | undefined;
}

/** 数据分页结果 */
export class PageResultOfShipInfo implements IPageResultOfShipInfo {
    /** 分页信息 */
    page?: Paging | undefined;
    /** 分页数据 */
    values?: ShipInfo[] | undefined;

    constructor(data?: IPageResultOfShipInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.page = _data["page"] ? Paging.fromJS(_data["page"]) : <any>undefined;
            if (Array.isArray(_data["values"])) {
                this.values = [] as any;
                for (let item of _data["values"])
                    this.values!.push(ShipInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PageResultOfShipInfo {
        data = typeof data === 'object' ? data : {};
        let result = new PageResultOfShipInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["page"] = this.page ? this.page.toJSON() : <any>undefined;
        if (Array.isArray(this.values)) {
            data["values"] = [];
            for (let item of this.values)
                data["values"].push(item.toJSON());
        }
        return data; 
    }
}

/** 数据分页结果 */
export interface IPageResultOfShipInfo {
    /** 分页信息 */
    page?: Paging | undefined;
    /** 分页数据 */
    values?: ShipInfo[] | undefined;
}

/** 船舶基本信息 */
export class ShipInfo implements IShipInfo {
    /** MMSI编号 */
    mmsi?: string | undefined;
    /** IMO编号 */
    imo?: string | undefined;
    /** 英文船名 */
    name?: string | undefined;
    /** 中文船名 */
    cnName?: string | undefined;
    /** 船长 */
    shipLength!: number;
    /** 国籍 */
    nationality?: string | undefined;
    /** 船宽 */
    shipWidth!: number;
    /** 最大吃水深度 */
    maxDraft!: number;
    /** 载重吨 */
    loadWeight!: number;
    /** 呼号 */
    callSign?: string | undefined;
    /** 船舶类型及状态 */
    shipType?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IShipInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.mmsi = _data["mmsi"];
            this.imo = _data["imo"];
            this.name = _data["name"];
            this.cnName = _data["cnName"];
            this.shipLength = _data["shipLength"];
            this.nationality = _data["nationality"];
            this.shipWidth = _data["shipWidth"];
            this.maxDraft = _data["maxDraft"];
            this.loadWeight = _data["loadWeight"];
            this.callSign = _data["callSign"];
            this.shipType = _data["shipType"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): ShipInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ShipInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["mmsi"] = this.mmsi;
        data["imo"] = this.imo;
        data["name"] = this.name;
        data["cnName"] = this.cnName;
        data["shipLength"] = this.shipLength;
        data["nationality"] = this.nationality;
        data["shipWidth"] = this.shipWidth;
        data["maxDraft"] = this.maxDraft;
        data["loadWeight"] = this.loadWeight;
        data["callSign"] = this.callSign;
        data["shipType"] = this.shipType;
        data["remark"] = this.remark;
        return data; 
    }
}

/** 船舶基本信息 */
export interface IShipInfo {
    /** MMSI编号 */
    mmsi?: string | undefined;
    /** IMO编号 */
    imo?: string | undefined;
    /** 英文船名 */
    name?: string | undefined;
    /** 中文船名 */
    cnName?: string | undefined;
    /** 船长 */
    shipLength: number;
    /** 国籍 */
    nationality?: string | undefined;
    /** 船宽 */
    shipWidth: number;
    /** 最大吃水深度 */
    maxDraft: number;
    /** 载重吨 */
    loadWeight: number;
    /** 呼号 */
    callSign?: string | undefined;
    /** 船舶类型及状态 */
    shipType?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 船舶名称信息 */
export abstract class IShipName implements IIShipName {
    /** MMSI */
    mmsi!: string;
    /** 船名 (英文船名) */
    name!: string;
    /** 中文/本地船名
             */
    cnName!: string;

    constructor(data?: IIShipName) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.mmsi = _data["mmsi"];
            this.name = _data["name"];
            this.cnName = _data["cnName"];
        }
    }

    static fromJS(data: any): IShipName {
        data = typeof data === 'object' ? data : {};
        return data
        // throw new Error("The abstract class 'IShipName' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["mmsi"] = this.mmsi;
        data["name"] = this.name;
        data["cnName"] = this.cnName;
        return data; 
    }
}

/** 船舶名称信息 */
export interface IIShipName {
    /** MMSI */
    mmsi: string;
    /** 船名 (英文船名) */
    name: string;
    /** 中文/本地船名
             */
    cnName: string;
}

/** 数据分页结果 */
export class PageResultOfDayTide implements IPageResultOfDayTide {
    /** 分页信息 */
    page?: Paging | undefined;
    /** 分页数据 */
    values?: DayTide[] | undefined;

    constructor(data?: IPageResultOfDayTide) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.page = _data["page"] ? Paging.fromJS(_data["page"]) : <any>undefined;
            if (Array.isArray(_data["values"])) {
                this.values = [] as any;
                for (let item of _data["values"])
                    this.values!.push(DayTide.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PageResultOfDayTide {
        data = typeof data === 'object' ? data : {};
        let result = new PageResultOfDayTide();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["page"] = this.page ? this.page.toJSON() : <any>undefined;
        if (Array.isArray(this.values)) {
            data["values"] = [];
            for (let item of this.values)
                data["values"].push(item.toJSON());
        }
        return data; 
    }
}

/** 数据分页结果 */
export interface IPageResultOfDayTide {
    /** 分页信息 */
    page?: Paging | undefined;
    /** 分页数据 */
    values?: DayTide[] | undefined;
}

/** 每日潮汐表 每天四个时段的潮时和潮高 */
export class DayTide implements IDayTide {
    /** 潮汐日期 */
    tideDate!: string;
    /** 第一潮时 */
    firstTime!: string;
    /** 第一潮高 */
    firstTide!: number;
    /** 第二潮时 */
    secondTime!: string;
    /** 第二潮高 */
    secondTide!: number;
    /** 第三潮时 */
    thirdTime!: string;
    /** 第三潮高 */
    thirdTide!: number;
    /** 第四潮时 */
    fourthTime?: string | undefined;
    /** 第四潮高 */
    fourthTide?: number | undefined;

    constructor(data?: IDayTide) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tideDate = _data["tideDate"];
            this.firstTime = _data["firstTime"];
            this.firstTide = _data["firstTide"];
            this.secondTime = _data["secondTime"];
            this.secondTide = _data["secondTide"];
            this.thirdTime = _data["thirdTime"];
            this.thirdTide = _data["thirdTide"];
            this.fourthTime = _data["fourthTime"];
            this.fourthTide = _data["fourthTide"];
        }
    }

    static fromJS(data: any): DayTide {
        data = typeof data === 'object' ? data : {};
        let result = new DayTide();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tideDate"] = this.tideDate;
        data["firstTime"] = this.firstTime;
        data["firstTide"] = this.firstTide;
        data["secondTime"] = this.secondTime;
        data["secondTide"] = this.secondTide;
        data["thirdTime"] = this.thirdTime;
        data["thirdTide"] = this.thirdTide;
        data["fourthTime"] = this.fourthTime;
        data["fourthTide"] = this.fourthTide;
        return data; 
    }
}

/** 每日潮汐表 每天四个时段的潮时和潮高 */
export interface IDayTide {
    /** 潮汐日期 */
    tideDate: string;
    /** 第一潮时 */
    firstTime: string;
    /** 第一潮高 */
    firstTide: number;
    /** 第二潮时 */
    secondTime: string;
    /** 第二潮高 */
    secondTide: number;
    /** 第三潮时 */
    thirdTime: string;
    /** 第三潮高 */
    thirdTide: number;
    /** 第四潮时 */
    fourthTime?: string | undefined;
    /** 第四潮高 */
    fourthTide?: number | undefined;
}

/** 潮汐点 */
export class TidePoint implements ITidePoint {
    /** 潮汐时间 */
    time!: string;
    /** 潮汐高度 */
    value!: number;

    constructor(data?: ITidePoint) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.time = _data["time"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): TidePoint {
        data = typeof data === 'object' ? data : {};
        let result = new TidePoint();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["time"] = this.time;
        data["value"] = this.value;
        return data; 
    }
}

/** 潮汐点 */
export interface ITidePoint {
    /** 潮汐时间 */
    time: string;
    /** 潮汐高度 */
    value: number;
}

/** 数据分页结果 */
export class PageResultOfWeather implements IPageResultOfWeather {
    /** 分页信息 */
    page?: Paging | undefined;
    /** 分页数据 */
    values?: Weather[] | undefined;

    constructor(data?: IPageResultOfWeather) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.page = _data["page"] ? Paging.fromJS(_data["page"]) : <any>undefined;
            if (Array.isArray(_data["values"])) {
                this.values = [] as any;
                for (let item of _data["values"])
                    this.values!.push(Weather.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PageResultOfWeather {
        data = typeof data === 'object' ? data : {};
        let result = new PageResultOfWeather();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["page"] = this.page ? this.page.toJSON() : <any>undefined;
        if (Array.isArray(this.values)) {
            data["values"] = [];
            for (let item of this.values)
                data["values"].push(item.toJSON());
        }
        return data; 
    }
}

/** 数据分页结果 */
export interface IPageResultOfWeather {
    /** 分页信息 */
    page?: Paging | undefined;
    /** 分页数据 */
    values?: Weather[] | undefined;
}

/** 气象数据 */
export class Weather implements IWeather {
    /** 主键 */
    weatherId!: number;
    /** 接收时间 */
    regDate!: string;
    /** 发布时间 */
    publishDate!: string;
    /** 时效 */
    times?: string | undefined;
    /** 天气 */
    weatherInfo?: string | undefined;
    /** 风力 */
    windPower?: string | undefined;
    /** 风向 */
    windDirection?: string | undefined;
    /** 能见度（千米） */
    visibility!: number;
    /** 标识 0为未标识，1为标识 */
    mark?: string | undefined;
    /** 信息  */
    note?: string | undefined;

    constructor(data?: IWeather) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.weatherId = _data["weatherId"];
            this.regDate = _data["regDate"];
            this.publishDate = _data["publishDate"];
            this.times = _data["times"];
            this.weatherInfo = _data["weatherInfo"];
            this.windPower = _data["windPower"];
            this.windDirection = _data["windDirection"];
            this.visibility = _data["visibility"];
            this.mark = _data["mark"];
            this.note = _data["note"];
        }
    }

    static fromJS(data: any): Weather {
        data = typeof data === 'object' ? data : {};
        let result = new Weather();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["weatherId"] = this.weatherId;
        data["regDate"] = this.regDate;
        data["publishDate"] = this.publishDate;
        data["times"] = this.times;
        data["weatherInfo"] = this.weatherInfo;
        data["windPower"] = this.windPower;
        data["windDirection"] = this.windDirection;
        data["visibility"] = this.visibility;
        data["mark"] = this.mark;
        data["note"] = this.note;
        return data; 
    }
}

/** 气象数据 */
export interface IWeather {
    /** 主键 */
    weatherId: number;
    /** 接收时间 */
    regDate: string;
    /** 发布时间 */
    publishDate: string;
    /** 时效 */
    times?: string | undefined;
    /** 天气 */
    weatherInfo?: string | undefined;
    /** 风力 */
    windPower?: string | undefined;
    /** 风向 */
    windDirection?: string | undefined;
    /** 能见度（千米） */
    visibility: number;
    /** 标识 0为未标识，1为标识 */
    mark?: string | undefined;
    /** 信息  */
    note?: string | undefined;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}

}