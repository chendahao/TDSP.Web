/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.8.1.0 (NJsonSchema v10.2.0.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export module tugApi {

export class JobRecordClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param date (optional) 
     * @param pageSize (optional) 
     * @param page (optional) 
     * @param sortBy (optional) 
     * @param searchKey (optional) 
     * @param descending (optional) 
     * @return Success
     */
    jobRecord(date: string | undefined, pageSize: number | null | undefined, page: number | null | undefined, sortBy: string | null | undefined, searchKey: string | null | undefined, descending: boolean | undefined , cancelToken?: CancelToken | undefined): Promise<TugJobRecordPageResult> {
        let url_ = this.baseUrl + "/api/JobRecord?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (pageSize !== undefined && pageSize !== null)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (page !== undefined && page !== null)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (sortBy !== undefined && sortBy !== null)
            url_ += "SortBy=" + encodeURIComponent("" + sortBy) + "&";
        if (searchKey !== undefined && searchKey !== null)
            url_ += "SearchKey=" + encodeURIComponent("" + searchKey) + "&";
        if (descending === null)
            throw new Error("The parameter 'descending' cannot be null.");
        else if (descending !== undefined)
            url_ += "Descending=" + encodeURIComponent("" + descending) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processJobRecord(_response);
        });
    }

    protected processJobRecord(response: AxiosResponse): Promise<TugJobRecordPageResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = TugJobRecordPageResult.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TugJobRecordPageResult>(<any>null);
    }

    /**
     * 根据 拖轮mmsi 查询 每日作业记录
     * @return Success
     */
    jobRecordAll(mmsi: string | null, date: string , cancelToken?: CancelToken | undefined): Promise<TugJobRecord[]> {
        let url_ = this.baseUrl + "/api/JobRecord/{mmsi}/{date}";
        if (mmsi === undefined || mmsi === null)
            throw new Error("The parameter 'mmsi' must be defined.");
        url_ = url_.replace("{mmsi}", encodeURIComponent("" + mmsi));
        if (date === undefined || date === null)
            throw new Error("The parameter 'date' must be defined.");
        url_ = url_.replace("{date}", encodeURIComponent("" + date));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processJobRecordAll(_response);
        });
    }

    protected processJobRecordAll(response: AxiosResponse): Promise<TugJobRecord[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TugJobRecord.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TugJobRecord[]>(<any>null);
    }
}

export class TugInfoClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 获取 拖轮信息 分页结果
     * @param pageSize (optional) 
     * @param page (optional) 
     * @param sortBy (optional) 
     * @param searchKey (optional) 
     * @param descending (optional) 
     * @return Success
     */
    tugInfo(pageSize: number | null | undefined, page: number | null | undefined, sortBy: string | null | undefined, searchKey: string | null | undefined, descending: boolean | undefined , cancelToken?: CancelToken | undefined): Promise<TugInfoPageResult> {
        let url_ = this.baseUrl + "/api/TugInfo?";
        if (pageSize !== undefined && pageSize !== null)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (page !== undefined && page !== null)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (sortBy !== undefined && sortBy !== null)
            url_ += "SortBy=" + encodeURIComponent("" + sortBy) + "&";
        if (searchKey !== undefined && searchKey !== null)
            url_ += "SearchKey=" + encodeURIComponent("" + searchKey) + "&";
        if (descending === null)
            throw new Error("The parameter 'descending' cannot be null.");
        else if (descending !== undefined)
            url_ += "Descending=" + encodeURIComponent("" + descending) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTugInfo(_response);
        });
    }

    protected processTugInfo(response: AxiosResponse): Promise<TugInfoPageResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = TugInfoPageResult.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TugInfoPageResult>(<any>null);
    }

    /**
     * 新建 拖轮信息
     * @param body (optional) 
     * @return Success
     */
    tugInfo2(body: TugInfo | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/TugInfo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTugInfo2(_response);
        });
    }

    protected processTugInfo2(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 202) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * 更新拖轮信息
     * @param mmsi (optional) 
     * @param body (optional) 
     * @return Success
     */
    tugInfo3(mmsi: string | null | undefined, body: TugInfo | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/TugInfo?";
        if (mmsi !== undefined && mmsi !== null)
            url_ += "mmsi=" + encodeURIComponent("" + mmsi) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTugInfo3(_response);
        });
    }

    protected processTugInfo3(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 202) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    tugInfo4(mmsi: string | null , cancelToken?: CancelToken | undefined): Promise<TugInfo> {
        let url_ = this.baseUrl + "/api/TugInfo/{mmsi}";
        if (mmsi === undefined || mmsi === null)
            throw new Error("The parameter 'mmsi' must be defined.");
        url_ = url_.replace("{mmsi}", encodeURIComponent("" + mmsi));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTugInfo4(_response);
        });
    }

    protected processTugInfo4(response: AxiosResponse): Promise<TugInfo> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = TugInfo.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TugInfo>(<any>null);
    }

    /**
     * 删除拖轮记录
     * @return Success
     */
    tugInfo5(mmsi: string | null , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/TugInfo/{mmsi}";
        if (mmsi === undefined || mmsi === null)
            throw new Error("The parameter 'mmsi' must be defined.");
        url_ = url_.replace("{mmsi}", encodeURIComponent("" + mmsi));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTugInfo5(_response);
        });
    }

    protected processTugInfo5(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class TugJobClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 获取 拖轮作业 每天的分页记录
     * @param date (optional) 
     * @param pageSize (optional) 
     * @param page (optional) 
     * @param sortBy (optional) 
     * @param searchKey (optional) 
     * @param descending (optional) 
     * @return Success
     */
    tugJob(date: string | undefined, pageSize: number | null | undefined, page: number | null | undefined, sortBy: string | null | undefined, searchKey: string | null | undefined, descending: boolean | undefined , cancelToken?: CancelToken | undefined): Promise<TugJobPageResult> {
        let url_ = this.baseUrl + "/api/TugJob?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (pageSize !== undefined && pageSize !== null)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (page !== undefined && page !== null)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (sortBy !== undefined && sortBy !== null)
            url_ += "SortBy=" + encodeURIComponent("" + sortBy) + "&";
        if (searchKey !== undefined && searchKey !== null)
            url_ += "SearchKey=" + encodeURIComponent("" + searchKey) + "&";
        if (descending === null)
            throw new Error("The parameter 'descending' cannot be null.");
        else if (descending !== undefined)
            url_ += "Descending=" + encodeURIComponent("" + descending) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTugJob(_response);
        });
    }

    protected processTugJob(response: AxiosResponse): Promise<TugJobPageResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = TugJobPageResult.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TugJobPageResult>(<any>null);
    }

    /**
     * 创建 拖轮作业
     * @param body (optional) 
     * @return Success
     */
    tugJob2(body: TugJobDto | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/TugJob";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTugJob2(_response);
        });
    }

    protected processTugJob2(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * 查询当前正在进行的作业
     * @return Success
     */
    tugJob3(id: number , cancelToken?: CancelToken | undefined): Promise<TugJob> {
        let url_ = this.baseUrl + "/api/TugJob/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTugJob3(_response);
        });
    }

    protected processTugJob3(response: AxiosResponse): Promise<TugJob> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = TugJob.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TugJob>(<any>null);
    }

    /**
     * 更新 作业状态
     * @param status (optional) 
     * @return Success
     */
    tugJob4(id: number, status: JobStatus | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/TugJob/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (status === null)
            throw new Error("The parameter 'status' cannot be null.");
        else if (status !== undefined)
            url_ += "status=" + encodeURIComponent("" + status) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "PUT",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTugJob4(_response);
        });
    }

    protected processTugJob4(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * 根据状态查询 作业
     * @param date (optional) 
     * @return Success
     */
    status(status: JobStatus, date: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<TugJob[]> {
        let url_ = this.baseUrl + "/api/TugJob/status/{status}?";
        if (status === undefined || status === null)
            throw new Error("The parameter 'status' must be defined.");
        url_ = url_.replace("{status}", encodeURIComponent("" + status));
        if (date !== undefined && date !== null)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processStatus(_response);
        });
    }

    protected processStatus(response: AxiosResponse): Promise<TugJob[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TugJob.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TugJob[]>(<any>null);
    }

    /**
     * 查询当前正在进行的作业
     * @return Success
     */
    running(  cancelToken?: CancelToken | undefined): Promise<TugJob[]> {
        let url_ = this.baseUrl + "/api/TugJob/status/running";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRunning(_response);
        });
    }

    protected processRunning(response: AxiosResponse): Promise<TugJob[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TugJob.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TugJob[]>(<any>null);
    }
}

export class TugScheduleClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 获取 今日 调度计划
     * @return Success
     */
    tugScheduleAll(  cancelToken?: CancelToken | undefined): Promise<TugSchedule[]> {
        let url_ = this.baseUrl + "/api/TugSchedule";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTugScheduleAll(_response);
        });
    }

    protected processTugScheduleAll(response: AxiosResponse): Promise<TugSchedule[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TugSchedule.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TugSchedule[]>(<any>null);
    }

    /**
     * 新建调度计划
     * @param bpId (optional) 
     * @return Success
     */
    tugSchedule(bpId: string | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/TugSchedule?";
        if (bpId === null)
            throw new Error("The parameter 'bpId' cannot be null.");
        else if (bpId !== undefined)
            url_ += "bpId=" + encodeURIComponent("" + bpId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTugSchedule(_response);
        });
    }

    protected processTugSchedule(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * 根据日期获取 调度计划
     * @return Success
     */
    tugSchedule2(date: string , cancelToken?: CancelToken | undefined): Promise<TugSchedule[]> {
        let url_ = this.baseUrl + "/api/TugSchedule/{date}";
        if (date === undefined || date === null)
            throw new Error("The parameter 'date' must be defined.");
        url_ = url_.replace("{date}", encodeURIComponent("" + date));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTugSchedule2(_response);
        });
    }

    protected processTugSchedule2(response: AxiosResponse): Promise<TugSchedule[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TugSchedule.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TugSchedule[]>(<any>null);
    }

    /**
     * 根据Id 获取 拖轮调度计划
     * @param id (optional) 
     * @return Success
     */
    id(id: number | undefined , cancelToken?: CancelToken | undefined): Promise<TugSchedule> {
        let url_ = this.baseUrl + "/api/TugSchedule/id?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processId(_response);
        });
    }

    protected processId(response: AxiosResponse): Promise<TugSchedule> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = TugSchedule.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TugSchedule>(<any>null);
    }

    /**
     * 增加拖轮
     * @param id 调度计划Id
     * @param mmsi (optional) 拖轮MMSI
     * @return Success
     */
    add(id: number, mmsi: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/TugSchedule/Add/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (mmsi !== undefined && mmsi !== null)
            url_ += "mmsi=" + encodeURIComponent("" + mmsi) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAdd(_response);
        });
    }

    protected processAdd(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * 根据 BerthhingPlan 生成调度计划
     * @param periodCode (optional) 期间代码
     * @return Success
     */
    generate(periodCode: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/TugSchedule/Generate?";
        if (periodCode !== undefined && periodCode !== null)
            url_ += "periodCode=" + encodeURIComponent("" + periodCode) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGenerate(_response);
        });
    }

    protected processGenerate(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class TugStandardClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 新建记录
     * @param body (optional) 
     * @return Success
     */
    tugStandard(body: TugStandard | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/TugStandard";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTugStandard(_response);
        });
    }

    protected processTugStandard(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * 获取分页结果
     * @param pageSize (optional) 
     * @param page (optional) 
     * @param sortBy (optional) 
     * @param searchKey (optional) 
     * @param descending (optional) 
     * @return Success
     */
    tugStandard2(pageSize: number | null | undefined, page: number | null | undefined, sortBy: string | null | undefined, searchKey: string | null | undefined, descending: boolean | undefined , cancelToken?: CancelToken | undefined): Promise<TugStandardPageResult> {
        let url_ = this.baseUrl + "/api/TugStandard?";
        if (pageSize !== undefined && pageSize !== null)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (page !== undefined && page !== null)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (sortBy !== undefined && sortBy !== null)
            url_ += "SortBy=" + encodeURIComponent("" + sortBy) + "&";
        if (searchKey !== undefined && searchKey !== null)
            url_ += "SearchKey=" + encodeURIComponent("" + searchKey) + "&";
        if (descending === null)
            throw new Error("The parameter 'descending' cannot be null.");
        else if (descending !== undefined)
            url_ += "Descending=" + encodeURIComponent("" + descending) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTugStandard2(_response);
        });
    }

    protected processTugStandard2(response: AxiosResponse): Promise<TugStandardPageResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = TugStandardPageResult.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TugStandardPageResult>(<any>null);
    }

    /**
     * 更新记录
     * @param body (optional) 
     * @return Success
     */
    tugStandard3(id: number, body: TugStandard | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/TugStandard/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTugStandard3(_response);
        });
    }

    protected processTugStandard3(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * 根据 Id 删除对象
     * @return Success
     */
    tugStandard4(id: number , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/TugStandard/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTugStandard4(_response);
        });
    }

    protected processTugStandard4(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * 根据主键获取对象实体
     * @return Success
     */
    tugStandard5(id: number , cancelToken?: CancelToken | undefined): Promise<TugStandard> {
        let url_ = this.baseUrl + "/api/TugStandard/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTugStandard5(_response);
        });
    }

    protected processTugStandard5(response: AxiosResponse): Promise<TugStandard> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = TugStandard.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TugStandard>(<any>null);
    }
}

export class TugStateClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 获取全部拖轮状态
     * @return Success
     */
    tugStateAll(  cancelToken?: CancelToken | undefined): Promise<TugState[]> {
        let url_ = this.baseUrl + "/api/TugState";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTugStateAll(_response);
        });
    }

    protected processTugStateAll(response: AxiosResponse): Promise<TugState[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TugState.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TugState[]>(<any>null);
    }

    /**
     * 根据 拖轮 MMSI 获取拖轮状态
     * @return Success
     */
    tugState(mmsi: string | null , cancelToken?: CancelToken | undefined): Promise<TugState> {
        let url_ = this.baseUrl + "/api/TugState/{mmsi}";
        if (mmsi === undefined || mmsi === null)
            throw new Error("The parameter 'mmsi' must be defined.");
        url_ = url_.replace("{mmsi}", encodeURIComponent("" + mmsi));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTugState(_response);
        });
    }

    protected processTugState(response: AxiosResponse): Promise<TugState> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = TugState.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TugState>(<any>null);
    }
}

export class TugStatusClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 获取全部拖轮状态
     * @return Success
     */
    tugStatusAll(  cancelToken?: CancelToken | undefined): Promise<TugState[]> {
        let url_ = this.baseUrl + "/api/TugStatus";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTugStatusAll(_response);
        });
    }

    protected processTugStatusAll(response: AxiosResponse): Promise<TugState[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TugState.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TugState[]>(<any>null);
    }

    /**
     * 根据 mmsi 获取 拖轮状态
     * @return Success
     */
    tugStatus(mmsi: string | null , cancelToken?: CancelToken | undefined): Promise<TugState> {
        let url_ = this.baseUrl + "/api/TugStatus/{mmsi}";
        if (mmsi === undefined || mmsi === null)
            throw new Error("The parameter 'mmsi' must be defined.");
        url_ = url_.replace("{mmsi}", encodeURIComponent("" + mmsi));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTugStatus(_response);
        });
    }

    protected processTugStatus(response: AxiosResponse): Promise<TugState> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = TugState.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TugState>(<any>null);
    }
}

export class Paging implements IPaging {
    readonly skip?: number;
    total?: number;
    pages?: number;
    pageSize?: number;
    page?: number;

    constructor(data?: IPaging) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.page = 20;
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).skip = _data["skip"];
            this.total = _data["total"];
            this.pages = _data["pages"];
            this.pageSize = _data["pageSize"];
            this.page = _data["page"] !== undefined ? _data["page"] : 20;
        }
    }

    static fromJS(data: any): Paging {
        data = typeof data === 'object' ? data : {};
        let result = new Paging();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["skip"] = this.skip;
        data["total"] = this.total;
        data["pages"] = this.pages;
        data["pageSize"] = this.pageSize;
        data["page"] = this.page;
        return data; 
    }
}

export interface IPaging {
    skip?: number;
    total?: number;
    pages?: number;
    pageSize?: number;
    page?: number;
}

export class ShipNamePart implements IShipNamePart {
    mmsi!: string;
    name!: string;
    cnName!: string;
    readonly fullName?: string | undefined;

    constructor(data?: IShipNamePart) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.mmsi = _data["mmsi"];
            this.name = _data["name"];
            this.cnName = _data["cnName"];
            (<any>this).fullName = _data["fullName"];
        }
    }

    static fromJS(data: any): ShipNamePart {
        data = typeof data === 'object' ? data : {};
        let result = new ShipNamePart();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["mmsi"] = this.mmsi;
        data["name"] = this.name;
        data["cnName"] = this.cnName;
        data["fullName"] = this.fullName;
        return data; 
    }
}

export interface IShipNamePart {
    mmsi: string;
    name: string;
    cnName: string;
    fullName?: string | undefined;
}

export enum JobEvent {
    _0 = 0,
    _1 = 1,
    _16 = 16,
    _32 = 32,
    _48 = 48,
    _128 = 128,
    __1 = -1,
}

export class TugJobRecord implements ITugJobRecord {
    autoId?: number;
    jobKind!: string;
    planId?: number | undefined;
    tug?: ShipNamePart;
    time?: string;
    event?: JobEvent;

    constructor(data?: ITugJobRecord) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.autoId = _data["autoId"];
            this.jobKind = _data["jobKind"];
            this.planId = _data["planId"];
            this.tug = _data["tug"] ? ShipNamePart.fromJS(_data["tug"]) : <any>undefined;
            this.time = _data["time"];
            this.event = _data["event"];
        }
    }

    static fromJS(data: any): TugJobRecord {
        data = typeof data === 'object' ? data : {};
        let result = new TugJobRecord();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["autoId"] = this.autoId;
        data["jobKind"] = this.jobKind;
        data["planId"] = this.planId;
        data["tug"] = this.tug ? this.tug.toJSON() : <any>undefined;
        data["time"] = this.time;
        data["event"] = this.event;
        return data; 
    }
}

export interface ITugJobRecord {
    autoId?: number;
    jobKind: string;
    planId?: number | undefined;
    tug?: ShipNamePart;
    time?: string;
    event?: JobEvent;
}

export class TugJobRecordPageResult implements ITugJobRecordPageResult {
    page?: Paging;
    readonly values?: TugJobRecord[] | undefined;

    constructor(data?: ITugJobRecordPageResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.page = _data["page"] ? Paging.fromJS(_data["page"]) : <any>undefined;
            if (Array.isArray(_data["values"])) {
                (<any>this).values = [] as any;
                for (let item of _data["values"])
                    (<any>this).values!.push(TugJobRecord.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TugJobRecordPageResult {
        data = typeof data === 'object' ? data : {};
        let result = new TugJobRecordPageResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["page"] = this.page ? this.page.toJSON() : <any>undefined;
        if (Array.isArray(this.values)) {
            data["values"] = [];
            for (let item of this.values)
                data["values"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ITugJobRecordPageResult {
    page?: Paging;
    values?: TugJobRecord[] | undefined;
}

export class TugInfo implements ITugInfo {
    mmsi?: string | undefined;
    name?: string | undefined;
    cnName?: string | undefined;
    shipLength!: number;
    shipWidth!: number;
    builtDate?: string | undefined;
    moldedDepth?: number | undefined;
    enginePower?: number;
    engineSpeed?: number;
    maxSpeed?: number | undefined;
    fullLoadDraft?: number;
    forwardDrag?: number;
    asternDrag?: number;
    towingHook?: string | undefined;

    constructor(data?: ITugInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.mmsi = _data["mmsi"];
            this.name = _data["name"];
            this.cnName = _data["cnName"];
            this.shipLength = _data["shipLength"];
            this.shipWidth = _data["shipWidth"];
            this.builtDate = _data["builtDate"];
            this.moldedDepth = _data["moldedDepth"];
            this.enginePower = _data["enginePower"];
            this.engineSpeed = _data["engineSpeed"];
            this.maxSpeed = _data["maxSpeed"];
            this.fullLoadDraft = _data["fullLoadDraft"];
            this.forwardDrag = _data["forwardDrag"];
            this.asternDrag = _data["asternDrag"];
            this.towingHook = _data["towingHook"];
        }
    }

    static fromJS(data: any): TugInfo {
        data = typeof data === 'object' ? data : {};
        let result = new TugInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["mmsi"] = this.mmsi;
        data["name"] = this.name;
        data["cnName"] = this.cnName;
        data["shipLength"] = this.shipLength;
        data["shipWidth"] = this.shipWidth;
        data["builtDate"] = this.builtDate;
        data["moldedDepth"] = this.moldedDepth;
        data["enginePower"] = this.enginePower;
        data["engineSpeed"] = this.engineSpeed;
        data["maxSpeed"] = this.maxSpeed;
        data["fullLoadDraft"] = this.fullLoadDraft;
        data["forwardDrag"] = this.forwardDrag;
        data["asternDrag"] = this.asternDrag;
        data["towingHook"] = this.towingHook;
        return data; 
    }
}

export interface ITugInfo {
    mmsi?: string | undefined;
    name?: string | undefined;
    cnName?: string | undefined;
    shipLength: number;
    shipWidth: number;
    builtDate?: string | undefined;
    moldedDepth?: number | undefined;
    enginePower?: number;
    engineSpeed?: number;
    maxSpeed?: number | undefined;
    fullLoadDraft?: number;
    forwardDrag?: number;
    asternDrag?: number;
    towingHook?: string | undefined;
}

export class TugInfoPageResult implements ITugInfoPageResult {
    page?: Paging;
    readonly values?: TugInfo[] | undefined;

    constructor(data?: ITugInfoPageResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.page = _data["page"] ? Paging.fromJS(_data["page"]) : <any>undefined;
            if (Array.isArray(_data["values"])) {
                (<any>this).values = [] as any;
                for (let item of _data["values"])
                    (<any>this).values!.push(TugInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TugInfoPageResult {
        data = typeof data === 'object' ? data : {};
        let result = new TugInfoPageResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["page"] = this.page ? this.page.toJSON() : <any>undefined;
        if (Array.isArray(this.values)) {
            data["values"] = [];
            for (let item of this.values)
                data["values"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ITugInfoPageResult {
    page?: Paging;
    values?: TugInfo[] | undefined;
}

export class JobTimePart implements IJobTimePart {
    start?: string | undefined;
    finish?: string | undefined;

    constructor(data?: IJobTimePart) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.start = _data["start"];
            this.finish = _data["finish"];
        }
    }

    static fromJS(data: any): JobTimePart {
        data = typeof data === 'object' ? data : {};
        let result = new JobTimePart();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["start"] = this.start;
        data["finish"] = this.finish;
        return data; 
    }
}

export interface IJobTimePart {
    start?: string | undefined;
    finish?: string | undefined;
}

export enum JobStatus {
    _0 = 0,
    _1 = 1,
    _16 = 16,
    _32 = 32,
    _128 = 128,
    __1 = -1,
}

export class TugJob implements ITugJob {
    autoId?: number;
    tug?: ShipNamePart;
    jobKind!: string;
    note?: string | undefined;
    planId?: number | undefined;
    jobTime?: JobTimePart;
    status?: JobStatus;
    created!: string;
    updated!: string;
    createdBy?: string | undefined;

    constructor(data?: ITugJob) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.autoId = _data["autoId"];
            this.tug = _data["tug"] ? ShipNamePart.fromJS(_data["tug"]) : <any>undefined;
            this.jobKind = _data["jobKind"];
            this.note = _data["note"];
            this.planId = _data["planId"];
            this.jobTime = _data["jobTime"] ? JobTimePart.fromJS(_data["jobTime"]) : <any>undefined;
            this.status = _data["status"];
            this.created = _data["created"];
            this.updated = _data["updated"];
            this.createdBy = _data["createdBy"];
        }
    }

    static fromJS(data: any): TugJob {
        data = typeof data === 'object' ? data : {};
        let result = new TugJob();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["autoId"] = this.autoId;
        data["tug"] = this.tug ? this.tug.toJSON() : <any>undefined;
        data["jobKind"] = this.jobKind;
        data["note"] = this.note;
        data["planId"] = this.planId;
        data["jobTime"] = this.jobTime ? this.jobTime.toJSON() : <any>undefined;
        data["status"] = this.status;
        data["created"] = this.created;
        data["updated"] = this.updated;
        data["createdBy"] = this.createdBy;
        return data; 
    }
}

export interface ITugJob {
    autoId?: number;
    tug?: ShipNamePart;
    jobKind: string;
    note?: string | undefined;
    planId?: number | undefined;
    jobTime?: JobTimePart;
    status?: JobStatus;
    created: string;
    updated: string;
    createdBy?: string | undefined;
}

export class TugJobPageResult implements ITugJobPageResult {
    page?: Paging;
    readonly values?: TugJob[] | undefined;

    constructor(data?: ITugJobPageResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.page = _data["page"] ? Paging.fromJS(_data["page"]) : <any>undefined;
            if (Array.isArray(_data["values"])) {
                (<any>this).values = [] as any;
                for (let item of _data["values"])
                    (<any>this).values!.push(TugJob.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TugJobPageResult {
        data = typeof data === 'object' ? data : {};
        let result = new TugJobPageResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["page"] = this.page ? this.page.toJSON() : <any>undefined;
        if (Array.isArray(this.values)) {
            data["values"] = [];
            for (let item of this.values)
                data["values"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ITugJobPageResult {
    page?: Paging;
    values?: TugJob[] | undefined;
}

export class TugJobDto implements ITugJobDto {
    /** 拖轮 MMSI */
    mmsi!: string;
    /** 拖轮名称 */
    name!: string;
    /** 作业类型 */
    jobKind!: string;

    constructor(data?: ITugJobDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.mmsi = _data["mmsi"];
            this.name = _data["name"];
            this.jobKind = _data["jobKind"];
        }
    }

    static fromJS(data: any): TugJobDto {
        data = typeof data === 'object' ? data : {};
        let result = new TugJobDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["mmsi"] = this.mmsi;
        data["name"] = this.name;
        data["jobKind"] = this.jobKind;
        return data; 
    }
}

export interface ITugJobDto {
    /** 拖轮 MMSI */
    mmsi: string;
    /** 拖轮名称 */
    name: string;
    /** 作业类型 */
    jobKind: string;
}

export class VesselInfoPart implements IVesselInfoPart {
    mmsi!: string;
    name!: string;
    cnName!: string;
    readonly fullName?: string | undefined;
    readonly shipType?: string | undefined;
    tradeType?: string | undefined;
    readonly dwt?: number;

    constructor(data?: IVesselInfoPart) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.mmsi = _data["mmsi"];
            this.name = _data["name"];
            this.cnName = _data["cnName"];
            (<any>this).fullName = _data["fullName"];
            (<any>this).shipType = _data["shipType"];
            this.tradeType = _data["tradeType"];
            (<any>this).dwt = _data["dwt"];
        }
    }

    static fromJS(data: any): VesselInfoPart {
        data = typeof data === 'object' ? data : {};
        let result = new VesselInfoPart();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["mmsi"] = this.mmsi;
        data["name"] = this.name;
        data["cnName"] = this.cnName;
        data["fullName"] = this.fullName;
        data["shipType"] = this.shipType;
        data["tradeType"] = this.tradeType;
        data["dwt"] = this.dwt;
        return data; 
    }
}

export interface IVesselInfoPart {
    mmsi: string;
    name: string;
    cnName: string;
    fullName?: string | undefined;
    shipType?: string | undefined;
    tradeType?: string | undefined;
    dwt?: number;
}

export enum VesselJobType {
    _1 = 1,
    _4 = 4,
    __1 = -1,
}

export class VesselJobPart implements IVesselJobPart {
    jobType?: VesselJobType;
    jobKind!: string;
    harbor?: string | undefined;
    berthNo?: string | undefined;
    tugNumber?: number;
    totalPower?: number;
    isTransPilot?: boolean;

    constructor(data?: IVesselJobPart) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.jobType = _data["jobType"];
            this.jobKind = _data["jobKind"];
            this.harbor = _data["harbor"];
            this.berthNo = _data["berthNo"];
            this.tugNumber = _data["tugNumber"];
            this.totalPower = _data["totalPower"];
            this.isTransPilot = _data["isTransPilot"];
        }
    }

    static fromJS(data: any): VesselJobPart {
        data = typeof data === 'object' ? data : {};
        let result = new VesselJobPart();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["jobType"] = this.jobType;
        data["jobKind"] = this.jobKind;
        data["harbor"] = this.harbor;
        data["berthNo"] = this.berthNo;
        data["tugNumber"] = this.tugNumber;
        data["totalPower"] = this.totalPower;
        data["isTransPilot"] = this.isTransPilot;
        return data; 
    }
}

export interface IVesselJobPart {
    jobType?: VesselJobType;
    jobKind: string;
    harbor?: string | undefined;
    berthNo?: string | undefined;
    tugNumber?: number;
    totalPower?: number;
    isTransPilot?: boolean;
}

export class WorkTimePart implements IWorkTimePart {
    standBy?: string | undefined;
    start?: string | undefined;
    tugOff?: string | undefined;
    finish?: string | undefined;

    constructor(data?: IWorkTimePart) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.standBy = _data["standBy"];
            this.start = _data["start"];
            this.tugOff = _data["tugOff"];
            this.finish = _data["finish"];
        }
    }

    static fromJS(data: any): WorkTimePart {
        data = typeof data === 'object' ? data : {};
        let result = new WorkTimePart();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["standBy"] = this.standBy;
        data["start"] = this.start;
        data["tugOff"] = this.tugOff;
        data["finish"] = this.finish;
        return data; 
    }
}

export interface IWorkTimePart {
    standBy?: string | undefined;
    start?: string | undefined;
    tugOff?: string | undefined;
    finish?: string | undefined;
}

export class ScheduleTugItem implements IScheduleTugItem {
    autoId?: number;
    planId?: number;
    owner?: TugSchedule;
    mmsi?: string | undefined;
    name?: string | undefined;
    enginePower?: number;
    getPilot?: boolean;
    escortPilog?: boolean;
    status?: JobStatus;
    workTime?: WorkTimePart;
    updateTime?: string;

    constructor(data?: IScheduleTugItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.autoId = _data["autoId"];
            this.planId = _data["planId"];
            this.owner = _data["owner"] ? TugSchedule.fromJS(_data["owner"]) : <any>undefined;
            this.mmsi = _data["mmsi"];
            this.name = _data["name"];
            this.enginePower = _data["enginePower"];
            this.getPilot = _data["getPilot"];
            this.escortPilog = _data["escortPilog"];
            this.status = _data["status"];
            this.workTime = _data["workTime"] ? WorkTimePart.fromJS(_data["workTime"]) : <any>undefined;
            this.updateTime = _data["updateTime"];
        }
    }

    static fromJS(data: any): ScheduleTugItem {
        data = typeof data === 'object' ? data : {};
        let result = new ScheduleTugItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["autoId"] = this.autoId;
        data["planId"] = this.planId;
        data["owner"] = this.owner ? this.owner.toJSON() : <any>undefined;
        data["mmsi"] = this.mmsi;
        data["name"] = this.name;
        data["enginePower"] = this.enginePower;
        data["getPilot"] = this.getPilot;
        data["escortPilog"] = this.escortPilog;
        data["status"] = this.status;
        data["workTime"] = this.workTime ? this.workTime.toJSON() : <any>undefined;
        data["updateTime"] = this.updateTime;
        return data; 
    }
}

export interface IScheduleTugItem {
    autoId?: number;
    planId?: number;
    owner?: TugSchedule;
    mmsi?: string | undefined;
    name?: string | undefined;
    enginePower?: number;
    getPilot?: boolean;
    escortPilog?: boolean;
    status?: JobStatus;
    workTime?: WorkTimePart;
    updateTime?: string;
}

export enum PlanStatus {
    _0 = 0,
    _1 = 1,
    _32 = 32,
    _128 = 128,
    __1 = -1,
}

export class TugSchedule implements ITugSchedule {
    planId?: number;
    sourceId?: string | undefined;
    date?: string;
    vessel?: VesselInfoPart;
    job?: VesselJobPart;
    totalPower?: number;
    tugCount?: number;
    time?: JobTimePart;
    tugs?: ScheduleTugItem[] | undefined;
    status?: PlanStatus;
    createdBy?: string | undefined;

    constructor(data?: ITugSchedule) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.planId = _data["planId"];
            this.sourceId = _data["sourceId"];
            this.date = _data["date"];
            this.vessel = _data["vessel"] ? VesselInfoPart.fromJS(_data["vessel"]) : <any>undefined;
            this.job = _data["job"] ? VesselJobPart.fromJS(_data["job"]) : <any>undefined;
            this.totalPower = _data["totalPower"];
            this.tugCount = _data["tugCount"];
            this.time = _data["time"] ? JobTimePart.fromJS(_data["time"]) : <any>undefined;
            if (Array.isArray(_data["tugs"])) {
                this.tugs = [] as any;
                for (let item of _data["tugs"])
                    this.tugs!.push(ScheduleTugItem.fromJS(item));
            }
            this.status = _data["status"];
            this.createdBy = _data["createdBy"];
        }
    }

    static fromJS(data: any): TugSchedule {
        data = typeof data === 'object' ? data : {};
        let result = new TugSchedule();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["planId"] = this.planId;
        data["sourceId"] = this.sourceId;
        data["date"] = this.date;
        data["vessel"] = this.vessel ? this.vessel.toJSON() : <any>undefined;
        data["job"] = this.job ? this.job.toJSON() : <any>undefined;
        data["totalPower"] = this.totalPower;
        data["tugCount"] = this.tugCount;
        data["time"] = this.time ? this.time.toJSON() : <any>undefined;
        if (Array.isArray(this.tugs)) {
            data["tugs"] = [];
            for (let item of this.tugs)
                data["tugs"].push(item.toJSON());
        }
        data["status"] = this.status;
        data["createdBy"] = this.createdBy;
        return data; 
    }
}

export interface ITugSchedule {
    planId?: number;
    sourceId?: string | undefined;
    date?: string;
    vessel?: VesselInfoPart;
    job?: VesselJobPart;
    totalPower?: number;
    tugCount?: number;
    time?: JobTimePart;
    tugs?: ScheduleTugItem[] | undefined;
    status?: PlanStatus;
    createdBy?: string | undefined;
}

export class LengthRangePart implements ILengthRangePart {
    min?: number;
    max?: number;

    constructor(data?: ILengthRangePart) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.min = _data["min"];
            this.max = _data["max"];
        }
    }

    static fromJS(data: any): LengthRangePart {
        data = typeof data === 'object' ? data : {};
        let result = new LengthRangePart();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["min"] = this.min;
        data["max"] = this.max;
        return data; 
    }
}

export interface ILengthRangePart {
    min?: number;
    max?: number;
}

export class TugNumberPart implements ITugNumberPart {
    berth?: number;
    unBerth?: number;

    constructor(data?: ITugNumberPart) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.berth = _data["berth"];
            this.unBerth = _data["unBerth"];
        }
    }

    static fromJS(data: any): TugNumberPart {
        data = typeof data === 'object' ? data : {};
        let result = new TugNumberPart();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["berth"] = this.berth;
        data["unBerth"] = this.unBerth;
        return data; 
    }
}

export interface ITugNumberPart {
    berth?: number;
    unBerth?: number;
}

export class TugStandard implements ITugStandard {
    autoId?: number;
    harbor?: string | undefined;
    shipType?: string | undefined;
    lengthRange?: LengthRangePart;
    tugNumber?: TugNumberPart;

    constructor(data?: ITugStandard) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.autoId = _data["autoId"];
            this.harbor = _data["harbor"];
            this.shipType = _data["shipType"];
            this.lengthRange = _data["lengthRange"] ? LengthRangePart.fromJS(_data["lengthRange"]) : <any>undefined;
            this.tugNumber = _data["tugNumber"] ? TugNumberPart.fromJS(_data["tugNumber"]) : <any>undefined;
        }
    }

    static fromJS(data: any): TugStandard {
        data = typeof data === 'object' ? data : {};
        let result = new TugStandard();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["autoId"] = this.autoId;
        data["harbor"] = this.harbor;
        data["shipType"] = this.shipType;
        data["lengthRange"] = this.lengthRange ? this.lengthRange.toJSON() : <any>undefined;
        data["tugNumber"] = this.tugNumber ? this.tugNumber.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ITugStandard {
    autoId?: number;
    harbor?: string | undefined;
    shipType?: string | undefined;
    lengthRange?: LengthRangePart;
    tugNumber?: TugNumberPart;
}

export class TugStandardPageResult implements ITugStandardPageResult {
    page?: Paging;
    readonly values?: TugStandard[] | undefined;

    constructor(data?: ITugStandardPageResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.page = _data["page"] ? Paging.fromJS(_data["page"]) : <any>undefined;
            if (Array.isArray(_data["values"])) {
                (<any>this).values = [] as any;
                for (let item of _data["values"])
                    (<any>this).values!.push(TugStandard.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TugStandardPageResult {
        data = typeof data === 'object' ? data : {};
        let result = new TugStandardPageResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["page"] = this.page ? this.page.toJSON() : <any>undefined;
        if (Array.isArray(this.values)) {
            data["values"] = [];
            for (let item of this.values)
                data["values"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ITugStandardPageResult {
    page?: Paging;
    values?: TugStandard[] | undefined;
}

export enum TugStatus {
    _0 = 0,
    _1 = 1,
    _16 = 16,
    _32 = 32,
    _48 = 48,
}

export class TugState implements ITugState {
    mmsi?: string | undefined;
    name!: string;
    cnName!: string;
    readonly fullName?: string | undefined;
    jobKind!: string;
    planId?: number | undefined;
    status?: TugStatus;
    updateTime?: string;

    constructor(data?: ITugState) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.mmsi = _data["mmsi"];
            this.name = _data["name"];
            this.cnName = _data["cnName"];
            (<any>this).fullName = _data["fullName"];
            this.jobKind = _data["jobKind"];
            this.planId = _data["planId"];
            this.status = _data["status"];
            this.updateTime = _data["updateTime"];
        }
    }

    static fromJS(data: any): TugState {
        data = typeof data === 'object' ? data : {};
        let result = new TugState();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["mmsi"] = this.mmsi;
        data["name"] = this.name;
        data["cnName"] = this.cnName;
        data["fullName"] = this.fullName;
        data["jobKind"] = this.jobKind;
        data["planId"] = this.planId;
        data["status"] = this.status;
        data["updateTime"] = this.updateTime;
        return data; 
    }
}

export interface ITugState {
    mmsi?: string | undefined;
    name: string;
    cnName: string;
    fullName?: string | undefined;
    jobKind: string;
    planId?: number | undefined;
    status?: TugStatus;
    updateTime?: string;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}

}